/*
** Title:          mrLvarchar.h
** SCCSid:         %W% %E% %U%
** CCid:           %W% %E% %U%
** Author:         informix
** Created:        01/27/2000 12:58
** Description:    This is a generated source file for the mrLvarchar DataBlade module.
** Comments:       Generated for project mrLvarchar.1.1
*/


/*
**    Special Note: This file was originally generated by
**  BladeSmith as a starting point, then was heavily modified.
**
**    Don't generate code from within BladeSmith; it will not 
**    merge changes; it will overwrite this file.
*/

#ifndef HDR_mrLvarchar_H
#define HDR_mrLvarchar_H

/* Standard library includes. */
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stddef.h>

/* Used by Informix GLS routines. */
#include "ifxgls.h"

/* Include when accessing the DataBlade API. */
#include <mi.h>
#include <minmmem.h>

/*
**    UDREXPORT is normally used to export a function from the DataBlade when
**    linking on NT.  UNIX source files should maintain this define in source
**    for use when porting back to NT.
*/
#ifndef UDREXPORT
#define UDREXPORT
#endif

/* Placeholder release information -- values need to be
** dynamically generated instead of hardcoded in this header.
*/
#define BUILD_VER            "1.1"
#define BUILD_DATE           "Fri June 1 2001"
#define mrLvarchar_MEM_NAME  "mrLvarchar_inter"

/* Storage flags */
#define MR_InRow         0    /* data is small enough for in-row   */
#define MR_TmpLo         1    /* stored in a temporary smart blob  */
#define MR_Lo            2    /* already stored in a permanent lo  */
#define MR_Cached_RTN    3    /* stored in PER_ROUTINE buffer      */
#define MR_Cached_CMD    4    /* stored in PER_COMMAND buffer      */
#define MR_Cached_STM    5    /* stored in PER_STATEMENT buffer    */
#define MR_Cached_TRX    6    /* stored in PER_TRANSACTION buffer  */
#define MR_Cached_SES    7    /* stored in PER_SESSION buffer      */
#define LO_ASSIGN       10    /* flagged passed to char_to_sblob() */
#define MR_Freed        11    /* value free'd by TempFree() */

typedef struct
{
    mi_integer    storage;    /* 4 bytes: how this object is stored */
    mi_integer    size;       /* 4 bytes: length of the text value  */
}
mrLvarcharHdr;

typedef struct
{
    mrLvarcharHdr hdr;    
    union
    {
        MI_LO_HANDLE lo;    /* LO handle, if smart blob. */
        mi_char data[1];    /* Start of data, if in-row. */
        void *mem;          /* Pointer to temporary in-memory cache. */
    }u;
}
mrLvarchar;

#define MAXLEN                2048
#define MR_THRESH            (MAXLEN - sizeof(mrLvarcharHdr))

#define CACHE_CHECK_SIZE    4
#define CACHE_CHECK_VAL     "ABCD"
#define TRACE_CLASS         "mrLvarchar"
#define TRACE_MEDIUM        20

/* ======== Trace macros for function entry and exit ============= */
#define FUNC_TRACE_ENTER(r) GL_DPRINTF(TRACE_CLASS, TRACE_MEDIUM, \
        ("idn_mrLvarchar_FUNC_ENTER", "FUNCNAME%s", r, MI_LIST_END));

#define FUNC_TRACE_EXIT(r) GL_DPRINTF(TRACE_CLASS, TRACE_MEDIUM, \
        ("idn_mrLvarchar_FUNC_EXIT", "FUNCNAME%s", r, MI_LIST_END));

/* ===================== Function prototypes ===================== */

/* ===== utility routines (not SQL entrypoints): ===== */
void raise_gl_error (mi_string *func, mi_string *gl_call, mi_integer gl_errno, 
                     MI_FPARAM  *Gen_fparam);

mi_lvarchar   *mrLvarchar_from_char (mi_char *data_in, mi_integer data_len,
                    MI_FPARAM *fp);

mi_char       *mrLvarchar_to_char(mi_lvarchar *object,
                    mi_integer  *data_len);

mi_char       *mrLvarchar_to_char_opt(mi_lvarchar *object,
                    mi_integer *data_len, mi_integer *alloc);

mi_char       *cache_from_char(mi_char *data_in, mi_integer data_len, 
                    mi_integer flag);
mi_char       *cache_get_ptr (mrLvarchar *object, mi_string *funcname);
char          *cache_copy (mrLvarchar *object, mi_string *funcname);

void          cache_free (mrLvarchar *object);

MI_CONNECTION *sblob_conn_get(mi_string *routine);
void          sblob_conn_free(MI_CONNECTION *sblob_conn);
MI_LO_HANDLE  *sblob_from_char (MI_CONNECTION *Gen_Con, mi_char *data_in,
                    mi_integer data_len, mi_integer flag, MI_FPARAM *fp);
MI_LO_HANDLE  *sblob_from_tmpsblob(MI_CONNECTION *Gen_Con, 
                    MI_LO_HANDLE *tmpsblob, MI_FPARAM *fp);
mi_integer    sblob_size(MI_LO_HANDLE *sblob, mi_int8 *sblob_size);
void          sbspace_name (MI_CONNECTION *Gen_Con,
                    MI_LO_HANDLE *sblob, mi_string *space_name, 
                    mi_integer space_name_length);
void          sbspace_name_column (MI_CONNECTION *Gen_Con, 
                    mi_string *space_name, mi_integer space_name_length,
                    MI_FPARAM *fp);

mi_lvarchar   *sblob_to_char(MI_LO_HANDLE *sblob);
mi_integer    storage_flag_check(mi_integer flag);
mi_integer    storage_get_mem();
MI_MEMORY_DURATION    storage_flag_to_md(mi_integer flag, mi_string *funcname);

/********************** C entrypoints for SQL UDRs **************************/

/* ====== opaque type support routines ====== */
UDREXPORT mi_lvarchar *idn_mrLvarcharAssign (mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharExportBinary (
                mi_lvarchar *Gen_param1, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharExportText (mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharImportBinary (
                mi_lvarchar *Gen_param1, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharImportText (
                mi_lvarchar *Gen_param1, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharInput(mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharLOhandles 
                (mi_lvarchar *Gen_param1, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharOutput (mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharReceive (mi_sendrecv *Gen_param1, 
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_sendrecv *idn_mrLvarcharSend (mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);

/* ====== Standard search operators ====== */
UDREXPORT mi_integer idn_mrLvarcharCompare (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharEqual (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharNotEqual (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharGreaterThan (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharGreaterThanOrEqual (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharLessThan (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_boolean idn_mrLvarcharLessThanOrEqual (mi_lvarchar *Gen_param1,
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);

/* ====== DBA functions ====== */
UDREXPORT mi_integer idn_mrLvarcharLength (mi_lvarchar *mr_in,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarcharRefcount(mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharSbspace (mi_lvarchar    *Gen_param1,
                MI_FPARAM *Gen_fparam);

/* ====== DataBlade Developer functions ====== */
UDREXPORT mi_lvarchar *mrLvarcharTemp_get();
UDREXPORT mi_lvarchar *mrLvarcharTemp_set (mi_lvarchar *storage);
UDREXPORT void TraceSet_mrLvarchar (mi_lvarchar *Gen_param,
                mi_integer Gen_TraceLevel, MI_FPARAM *Gen_fparam);
UDREXPORT void idn_mrLvarcharTempFree (mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharTempAssign
                (mi_lvarchar *Gen_param1, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *mrLvarcharRelease ();

/* ====== String functions ====== */
UDREXPORT mi_lvarchar *idn_mrLvarcharClip(mi_lvarchar *Gen_param1,
                MI_FPARAM *Gen_fparam );
UDREXPORT mi_lvarchar *idn_mrLvarcharConcat(mi_lvarchar    *Gen_param1, 
                mi_lvarchar *Gen_param2, MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharConcat_iter(mi_lvarchar *previous, 
                mi_lvarchar    *next, MI_FPARAM *Gen_fparam);
UDREXPORT void idn_mrLvarcharDestroy (mi_lvarchar    *Gen_param1,
                MI_FPARAM *Gen_fparam);
UDREXPORT mi_lvarchar *idn_mrLvarcharUpper (mi_lvarchar *object, MI_FPARAM *fp);
UDREXPORT mi_lvarchar *idn_mrLvarcharLower (mi_lvarchar *object, MI_FPARAM *fp);
UDREXPORT mi_lvarchar * idn_mrLvarchar_SubStr_2 (mi_lvarchar *mr_input,
                 mi_integer start, MI_FPARAM *fp);
UDREXPORT mi_lvarchar * idn_mrLvarchar_SubStr_3 (mi_lvarchar *mr_input,
                 mi_integer start, mi_integer length, MI_FPARAM *fp);
UDREXPORT mi_lvarchar * idn_mrLvarchar_SubStrb_2 (mi_lvarchar *mr_input,
                 mi_integer start, MI_FPARAM *fp);
UDREXPORT mi_lvarchar * idn_mrLvarchar_SubStrb_3 (mi_lvarchar *mr_input,
                 mi_integer start, mi_integer length, MI_FPARAM *fp);
UDREXPORT mi_integer idn_mrLvarchar_instr_2 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, MI_FPARAM *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarchar_instr_3 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, mi_integer start, 
                 MI_FPARAM *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarchar_instr_4 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, mi_integer start,
                 mi_integer occurrence, MI_FPARAM *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarchar_instrb_2 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, MI_FPARAM *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarchar_instrb_3 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, mi_integer   start,
                 MI_FPARAM   *Gen_fparam);
UDREXPORT mi_integer idn_mrLvarchar_instrb_4 (mi_lvarchar *search_str,
                 mi_lvarchar *search_val, mi_integer start,
                 mi_integer occurrence, MI_FPARAM *Gen_fparam);
#endif
