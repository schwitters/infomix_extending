-- Generated by BladeSmith 4.00.TC2  DO NOT MODIFY. --

execute procedure ifx_allow_newline('t');

begin work;

create opaque type idn_mrLvarchar(
	internallength = variable,
	maxlen = 2048,
	alignment = 4
);

grant usage on type idn_mrLvarchar to public;

create function idn_mrLvarcharIn (lvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharInput)" language c;

alter function idn_mrLvarcharIn (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharInput)");

alter function idn_mrLvarcharIn (lvarchar)
	with (add parallelizable);

alter function idn_mrLvarcharIn (lvarchar)
	with (add not variant);

grant execute on function idn_mrLvarcharIn (lvarchar) to public;

create implicit cast
	(
		lvarchar as idn_mrLvarchar
		with  idn_mrLvarcharIn
	);

create function idn_mrLvarcharOut (idn_mrLvarchar)
returns lvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharOutput)" language c;

alter function idn_mrLvarcharOut (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharOutput)");

alter function idn_mrLvarcharOut (idn_mrLvarchar)
	with (add parallelizable);

alter function idn_mrLvarcharOut (idn_mrLvarchar)
	with (add not variant);

grant execute on function idn_mrLvarcharOut (idn_mrLvarchar) to public;

create cast
	(
		idn_mrLvarchar as lvarchar
		with  idn_mrLvarcharOut
	);

create function idn_mrLvarcharSend (idn_mrLvarchar)
returns sendrecv
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharSend)" language c;

alter function idn_mrLvarcharSend (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharSend)");

alter function idn_mrLvarcharSend (idn_mrLvarchar)
	with (add parallelizable);

alter function idn_mrLvarcharSend (idn_mrLvarchar)
	with (add not variant);

grant execute on function idn_mrLvarcharSend (idn_mrLvarchar) to public;

create cast
	(
		idn_mrLvarchar as sendrecv
		with  idn_mrLvarcharSend
	);

create function idn_mrLvarcharRecv (sendrecv)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharReceive)" language c;

alter function idn_mrLvarcharRecv (sendrecv)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharReceive)");

alter function idn_mrLvarcharRecv (sendrecv)
	with (add parallelizable);

alter function idn_mrLvarcharRecv (sendrecv)
	with (add not variant);

grant execute on function idn_mrLvarcharRecv (sendrecv) to public;

create implicit cast
	(
		sendrecv as idn_mrLvarchar
		with  idn_mrLvarcharRecv
	);

create function idn_mrLvarcharImpT (impexp)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharImportText)" language c;

alter function idn_mrLvarcharImpT (impexp)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharImportText)");

alter function idn_mrLvarcharImpT (impexp)
	with (add parallelizable);

alter function idn_mrLvarcharImpT (impexp)
	with (add not variant);

grant execute on function idn_mrLvarcharImpT (impexp) to public;

create implicit cast
	(
		impexp as idn_mrLvarchar
		with  idn_mrLvarcharImpT
	);

create function idn_mrLvarcharExpT (idn_mrLvarchar)
returns impexp
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharExportText)" language c;

alter function idn_mrLvarcharExpT (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharExportText)");

alter function idn_mrLvarcharExpT (idn_mrLvarchar)
	with (add parallelizable);

alter function idn_mrLvarcharExpT (idn_mrLvarchar)
	with (add not variant);

grant execute on function idn_mrLvarcharExpT (idn_mrLvarchar) to public;

create cast
	(
		idn_mrLvarchar as impexp
		with  idn_mrLvarcharExpT
	);

create function idn_mrLvarcharImpB (impexpbin)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharImportBinary)" language c;

alter function idn_mrLvarcharImpB (impexpbin)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharImportBinary)");

alter function idn_mrLvarcharImpB (impexpbin)
	with (add parallelizable);

alter function idn_mrLvarcharImpB (impexpbin)
	with (add not variant);

grant execute on function idn_mrLvarcharImpB (impexpbin) to public;

create implicit cast
	(
		impexpbin as idn_mrLvarchar
		with  idn_mrLvarcharImpB
	);

create function idn_mrLvarcharExpB (idn_mrLvarchar)
returns impexpbin
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharExportBinary)" language c;

alter function idn_mrLvarcharExpB (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharExportBinary)");

alter function idn_mrLvarcharExpB (idn_mrLvarchar)
	with (add parallelizable);

alter function idn_mrLvarcharExpB (idn_mrLvarchar)
	with (add not variant);

grant execute on function idn_mrLvarcharExpB (idn_mrLvarchar) to public;

create cast
	(
		idn_mrLvarchar as impexpbin
		with  idn_mrLvarcharExpB
	);

create function Assign (idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharAssign)" language c;

alter function Assign (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharAssign)");

grant execute on function Assign (idn_mrLvarchar) to public;

create procedure Destroy (idn_mrLvarchar)
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharDestroy)" language c;

alter procedure Destroy (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharDestroy)");

grant execute on procedure Destroy (idn_mrLvarchar) to public;

create function LOhandles (idn_mrLvarchar)
returns lolist
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLOhandles)" language c;

alter function LOhandles (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLOhandles)");

grant execute on function LOhandles (idn_mrLvarchar) to public;

create function Compare (idn_mrLvarchar,idn_mrLvarchar)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharCompare)" language c;

alter function Compare (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharCompare)");

alter function Compare (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function Compare (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function Compare (idn_mrLvarchar,idn_mrLvarchar) to public;

create function Equal (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharEqual)" language c;

alter function Equal (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharEqual)");

alter function Equal (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function Equal (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

alter function Equal (idn_mrLvarchar,idn_mrLvarchar)
	with (add negator=NotEqual);

alter function Equal (idn_mrLvarchar,idn_mrLvarchar)
	with (add Commutator=Equal);

grant execute on function Equal (idn_mrLvarchar,idn_mrLvarchar) to public;

create function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharNotEqual)" language c;

alter function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharNotEqual)");

alter function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

alter function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add negator=Equal);

alter function NotEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add Commutator=NotEqual);

grant execute on function NotEqual (idn_mrLvarchar,idn_mrLvarchar) to public;

create function Concat (idn_mrLvarchar,idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharConcat)" language c;

alter function Concat (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharConcat)");

alter function Concat (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function Concat (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function Concat (idn_mrLvarchar,idn_mrLvarchar) to public;

create function Length (idn_mrLvarchar)
returns int
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLength)" language c;

alter function Length (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLength)");

alter function Length (idn_mrLvarchar)
	with (add parallelizable);

alter function Length (idn_mrLvarchar)
	with (add not variant);

grant execute on function Length (idn_mrLvarchar) to public;

create function mrLvarcharTemp (lvarchar)
returns lvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharTemp_set)" language c;

alter function mrLvarcharTemp (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharTemp_set)");

grant execute on function mrLvarcharTemp (lvarchar) to public;

create function mrLvarcharTemp ()
returns lvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharTemp_get)" language c;

alter function mrLvarcharTemp ()
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharTemp_get)");

grant execute on function mrLvarcharTemp () to public;

create function Sbspace (idn_mrLvarchar)
returns lvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharSbspace)" language c;

alter function Sbspace (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharSbspace)");

alter function Sbspace (idn_mrLvarchar)
	with (add not variant);

grant execute on function Sbspace (idn_mrLvarchar) to public;

create function Refcount (idn_mrLvarchar)
returns int
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharRefcount)" language c;

alter function Refcount (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharRefcount)");

grant execute on function Refcount (idn_mrLvarchar) to public;

create function Clip (idn_mrLvarchar)
returns varchar (255)
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharClip)" language c;

alter function Clip (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharClip)");

alter function Clip (idn_mrLvarchar)
	with (add parallelizable);

alter function Clip (idn_mrLvarchar)
	with (add not variant);

grant execute on function Clip (idn_mrLvarchar) to public;

create function DeepCopy (idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharDeepCopy)" language c;

alter function DeepCopy (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharDeepCopy)");

grant execute on function DeepCopy (idn_mrLvarchar) to public;

create function ConcatAll_iter (idn_mrLvarchar,idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharConcat_iter)" language c;

alter function ConcatAll_iter (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharConcat_iter)");

alter function ConcatAll_iter (idn_mrLvarchar,idn_mrLvarchar)
	with (add handlesnulls);

grant execute on function ConcatAll_iter (idn_mrLvarchar,idn_mrLvarchar) to public;

create function mrLvarcharRelease ()
returns lvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharRelease)" language c;

alter function mrLvarcharRelease ()
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(mrLvarcharRelease)");

grant execute on function mrLvarcharRelease () to public;

create function TempAssign (idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharTempAssign)" language c;

alter function TempAssign (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharTempAssign)");

alter function TempAssign (idn_mrLvarchar)
	with (add parallelizable);

grant execute on function TempAssign (idn_mrLvarchar) to public;

create function IsSmall (idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharIsSmall)" language c;

alter function IsSmall (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharIsSmall)");

alter function IsSmall (idn_mrLvarchar)
	with (add parallelizable);

alter function IsSmall (idn_mrLvarchar)
	with (add not variant);

grant execute on function IsSmall (idn_mrLvarchar) to public;

create function IsLarge (idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharIsLarge)" language c;

alter function IsLarge (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharIsLarge)");

alter function IsLarge (idn_mrLvarchar)
	with (add parallelizable);

alter function IsLarge (idn_mrLvarchar)
	with (add not variant);

grant execute on function IsLarge (idn_mrLvarchar) to public;

create function Upper (idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharUpper)" language c;

alter function Upper (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharUpper)");

alter function Upper (idn_mrLvarchar)
	with (add parallelizable);

alter function Upper (idn_mrLvarchar)
	with (add not variant);

grant execute on function Upper (idn_mrLvarchar) to public;

create function Lower (idn_mrLvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLower)" language c;

alter function Lower (idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLower)");

alter function Lower (idn_mrLvarchar)
	with (add parallelizable);

alter function Lower (idn_mrLvarchar)
	with (add not variant);

grant execute on function Lower (idn_mrLvarchar) to public;

create function Regexp_Match (idn_mrLvarchar,lvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Match)" language c;

alter function Regexp_Match (idn_mrLvarchar,lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Match)");

alter function Regexp_Match (idn_mrLvarchar,lvarchar)
	with (add not variant);

alter function Regexp_Match (idn_mrLvarchar,lvarchar)
	with (add class="regexp");

grant execute on function Regexp_Match (idn_mrLvarchar,lvarchar) to public;

create function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Replace)" language c;

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Replace)");

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar)
	with (add not variant);

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar)
	with (add class="regexp");

grant execute on function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar) to public;

create function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar,integer)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Replace_n)" language c;

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(Regexp_Replace_n)");

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar,integer)
	with (add not variant);

alter function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar,integer)
	with (add class="regexp");

grant execute on function Regexp_Replace (idn_mrLvarchar,lvarchar,lvarchar,integer) to public;

create function Instr (idn_mrLvarchar,lvarchar)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_2)" language c;

alter function Instr (idn_mrLvarchar,lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_2)");

alter function Instr (idn_mrLvarchar,lvarchar)
	with (add parallelizable);

alter function Instr (idn_mrLvarchar,lvarchar)
	with (add not variant);

grant execute on function Instr (idn_mrLvarchar,lvarchar) to public;

create function Instr (idn_mrLvarchar,lvarchar,integer)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_3)" language c;

alter function Instr (idn_mrLvarchar,lvarchar,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_3)");

alter function Instr (idn_mrLvarchar,lvarchar,integer)
	with (add parallelizable);

alter function Instr (idn_mrLvarchar,lvarchar,integer)
	with (add not variant);

grant execute on function Instr (idn_mrLvarchar,lvarchar,integer) to public;

create function Instr (idn_mrLvarchar,lvarchar,integer,integer)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_4)" language c;

alter function Instr (idn_mrLvarchar,lvarchar,integer,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instr_4)");

alter function Instr (idn_mrLvarchar,lvarchar,integer,integer)
	with (add parallelizable);

alter function Instr (idn_mrLvarchar,lvarchar,integer,integer)
	with (add not variant);

grant execute on function Instr (idn_mrLvarchar,lvarchar,integer,integer) to public;

create function Instrb (idn_mrLvarchar,lvarchar)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_2)" language c;

alter function Instrb (idn_mrLvarchar,lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_2)");

alter function Instrb (idn_mrLvarchar,lvarchar)
	with (add parallelizable);

alter function Instrb (idn_mrLvarchar,lvarchar)
	with (add not variant);

grant execute on function Instrb (idn_mrLvarchar,lvarchar) to public;

create function Instrb (idn_mrLvarchar,lvarchar,integer)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_3)" language c;

alter function Instrb (idn_mrLvarchar,lvarchar,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_3)");

alter function Instrb (idn_mrLvarchar,lvarchar,integer)
	with (add parallelizable);

alter function Instrb (idn_mrLvarchar,lvarchar,integer)
	with (add not variant);

grant execute on function Instrb (idn_mrLvarchar,lvarchar,integer) to public;

create function Instrb (idn_mrLvarchar,lvarchar,integer,integer)
returns integer
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_4)" language c;

alter function Instrb (idn_mrLvarchar,lvarchar,integer,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_instrb_4)");

alter function Instrb (idn_mrLvarchar,lvarchar,integer,integer)
	with (add parallelizable);

alter function Instrb (idn_mrLvarchar,lvarchar,integer,integer)
	with (add not variant);

grant execute on function Instrb (idn_mrLvarchar,lvarchar,integer,integer) to public;

create function Snip (idn_mrLvarchar,integer)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStr_2)" language c;

alter function Snip (idn_mrLvarchar,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStr_2)");

alter function Snip (idn_mrLvarchar,integer)
	with (add parallelizable);

alter function Snip (idn_mrLvarchar,integer)
	with (add not variant);

grant execute on function Snip (idn_mrLvarchar,integer) to public;

create function Snip (idn_mrLvarchar,integer,integer)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStr_3)" language c;

alter function Snip (idn_mrLvarchar,integer,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStr_3)");

alter function Snip (idn_mrLvarchar,integer,integer)
	with (add parallelizable);

alter function Snip (idn_mrLvarchar,integer,integer)
	with (add not variant);

grant execute on function Snip (idn_mrLvarchar,integer,integer) to public;

create function GreaterThan (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharGreaterThan)" language c;

alter function GreaterThan (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharGreaterThan)");

alter function GreaterThan (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function GreaterThan (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function GreaterThan (idn_mrLvarchar,idn_mrLvarchar) to public;

create function GreaterThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharGreaterThanOrEqual)" language c;

alter function GreaterThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharGreaterThanOrEqual)");

alter function GreaterThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function GreaterThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function GreaterThanOrEqual (idn_mrLvarchar,idn_mrLvarchar) to public;

create function LessThan (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLessThan)" language c;

alter function LessThan (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLessThan)");

alter function LessThan (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function LessThan (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function LessThan (idn_mrLvarchar,idn_mrLvarchar) to public;

create function LessThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
returns boolean
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLessThanOrEqual)" language c;

alter function LessThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarcharLessThanOrEqual)");

alter function LessThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add parallelizable);

alter function LessThanOrEqual (idn_mrLvarchar,idn_mrLvarchar)
	with (add not variant);

grant execute on function LessThanOrEqual (idn_mrLvarchar,idn_mrLvarchar) to public;

create function Snipb (idn_mrLvarchar,integer)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStrb_2)" language c;

alter function Snipb (idn_mrLvarchar,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStrb_2)");

alter function Snipb (idn_mrLvarchar,integer)
	with (add parallelizable);

alter function Snipb (idn_mrLvarchar,integer)
	with (add not variant);

grant execute on function Snipb (idn_mrLvarchar,integer) to public;

create function Snipb (idn_mrLvarchar,integer,integer)
returns idn_mrLvarchar
external name "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStrb_3)" language c;

alter function Snipb (idn_mrLvarchar,integer,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(idn_mrLvarchar_SubStrb_3)");

alter function Snipb (idn_mrLvarchar,integer,integer)
	with (add parallelizable);

alter function Snipb (idn_mrLvarchar,integer,integer)
	with (add not variant);

grant execute on function Snipb (idn_mrLvarchar,integer,integer) to public;

insert into systraceclasses (name) values ('mrLvarchar');
CREATE PROCEDURE TraceSet_mrLvarchar (lvarchar, int)
WITH (NOT VARIANT)
EXTERNAL NAME "$INFORMIXDIR/extend/mrLvarchar.1.1/mrLvarchar.bld(TraceSet_mrLvarchar)"
LANGUAGE C;

insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_ANY_TEXT", "en_us.1252",
"%FUNCNAME%: %MESSAGE%"
);
insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_ANY_TEXT", "en_us.8859-1",
"%FUNCNAME%: %MESSAGE%"
);

insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_FUNC_ENTER", "en_us.1252",
"%FUNCNAME%: function entry."
);

insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_FUNC_ENTER", "en_us.8859-1",
"%FUNCNAME%: function entry."
);

insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_FUNC_EXIT", "en_us.1252",
"%FUNCNAME%: function exit."
);

insert into systracemsgs (name, locale, message)
values
("idn_mrLvarchar_FUNC_EXIT", "en_us.8859-1",
"%FUNCNAME%: function exit."
);
--
-- The Insert->Aggregate wizard malfunctioned, so this adds the aggregate.
--
create aggregate ConcatAll with
(
    iter=ConcatAll_iter,
    combine=ConcatAll_iter
);                  
--
-- This opaque type stores a smart blob handle for large values, so it
-- cannot use the server's built-in hash function.
--
-- BladeSmith currently does not support this modifier, so we add
-- custom text that directly updates the sysxtdtypes table.
--
-- Note that objects are stored in lowercase.
--
UPDATE sysxtdtypes SET cannothash = 'T' where name = 'idn_mrlvarchar';
commit work;

