-- Generated by BladeSmith 3.70.TC1  DO NOT MODIFY. --

execute procedure ifx_allow_newline('t');

begin work;

create opaque type Node(
	internallength = variable,
	maxlen = 64,
	alignment = 4
);

grant usage on type Node to public;

create function NodeIn (lvarchar)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeInput)" language c;

alter function NodeIn (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeInput)");

alter function NodeIn (lvarchar)
	with (add parallelizable);

alter function NodeIn (lvarchar)
	with (add not variant);

grant execute on function NodeIn (lvarchar) to public;

create implicit cast 
(
	lvarchar as Node
	with  NodeIn
);

create function NodeOut (Node)
returns lvarchar
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeOutput)" language c;

alter function NodeOut (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeOutput)");

alter function NodeOut (Node)
	with (add parallelizable);

alter function NodeOut (Node)
	with (add not variant);

grant execute on function NodeOut (Node) to public;

create cast 
(
	Node as lvarchar
	with  NodeOut
);

create function NodeSend (Node)
returns sendrecv
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeSend)" language c;

alter function NodeSend (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeSend)");

alter function NodeSend (Node)
	with (add parallelizable);

alter function NodeSend (Node)
	with (add not variant);

grant execute on function NodeSend (Node) to public;

create cast 
(
	Node as sendrecv
	with  NodeSend
);

create function NodeRecv (sendrecv)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeReceive)" language c;

alter function NodeRecv (sendrecv)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeReceive)");

alter function NodeRecv (sendrecv)
	with (add parallelizable);

alter function NodeRecv (sendrecv)
	with (add not variant);

grant execute on function NodeRecv (sendrecv) to public;

create implicit cast 
(
	sendrecv as Node
	with  NodeRecv
);

create function NodeImpT (impexp)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeImportText)" language c;

alter function NodeImpT (impexp)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeImportText)");

alter function NodeImpT (impexp)
	with (add parallelizable);

alter function NodeImpT (impexp)
	with (add not variant);

grant execute on function NodeImpT (impexp) to public;

create implicit cast 
(
	impexp as Node
	with  NodeImpT
);

create function NodeExpT (Node)
returns impexp
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeExportText)" language c;

alter function NodeExpT (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeExportText)");

alter function NodeExpT (Node)
	with (add parallelizable);

alter function NodeExpT (Node)
	with (add not variant);

grant execute on function NodeExpT (Node) to public;

create cast 
(
	Node as impexp
	with  NodeExpT
);

create function NodeImpB (impexpbin)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeImportBinary)" language c;

alter function NodeImpB (impexpbin)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeImportBinary)");

alter function NodeImpB (impexpbin)
	with (add parallelizable);

alter function NodeImpB (impexpbin)
	with (add not variant);

grant execute on function NodeImpB (impexpbin) to public;

create implicit cast 
(
	impexpbin as Node
	with  NodeImpB
);

create function NodeExpB (Node)
returns impexpbin
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeExportBinary)" language c;

alter function NodeExpB (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeExportBinary)");

alter function NodeExpB (Node)
	with (add parallelizable);

alter function NodeExpB (Node)
	with (add not variant);

grant execute on function NodeExpB (Node) to public;

create cast 
(
	Node as impexpbin
	with  NodeExpB
);

create function Compare (Node,Node)
returns integer
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeCompare)" language c;

alter function Compare (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeCompare)");

alter function Compare (Node,Node)
	with (add parallelizable);

alter function Compare (Node,Node)
	with (add not variant);

grant execute on function Compare (Node,Node) to public;

create function Equal (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeEqual)" language c;

alter function Equal (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeEqual)");

alter function Equal (Node,Node)
	with (add parallelizable);

alter function Equal (Node,Node)
	with (add not variant);

alter function Equal (Node,Node)
	with (add negator=NotEqual);

grant execute on function Equal (Node,Node) to public;

create function NotEqual (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeNotEqual)" language c;

alter function NotEqual (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeNotEqual)");

alter function NotEqual (Node,Node)
	with (add parallelizable);

alter function NotEqual (Node,Node)
	with (add not variant);

alter function NotEqual (Node,Node)
	with (add negator=Equal);

grant execute on function NotEqual (Node,Node) to public;

create function LessThan (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLessThan)" language c;

alter function LessThan (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLessThan)");

alter function LessThan (Node,Node)
	with (add parallelizable);

alter function LessThan (Node,Node)
	with (add not variant);

alter function LessThan (Node,Node)
	with (add negator=GreaterThanOrEqual);

alter function LessThan (Node,Node)
	with (add Commutator=GreaterThanOrEqual);

grant execute on function LessThan (Node,Node) to public;

create function GreaterThan (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGreaterThan)" language c;

alter function GreaterThan (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGreaterThan)");

alter function GreaterThan (Node,Node)
	with (add parallelizable);

alter function GreaterThan (Node,Node)
	with (add not variant);

alter function GreaterThan (Node,Node)
	with (add negator=LessThanOrEqual);

alter function GreaterThan (Node,Node)
	with (add Commutator=LessThanOrEqual);

grant execute on function GreaterThan (Node,Node) to public;

create function LessThanOrEqual (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLessThanOrEqual)" language c;

alter function LessThanOrEqual (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLessThanOrEqual)");

alter function LessThanOrEqual (Node,Node)
	with (add parallelizable);

alter function LessThanOrEqual (Node,Node)
	with (add not variant);

alter function LessThanOrEqual (Node,Node)
	with (add negator=GreaterThan);

alter function LessThanOrEqual (Node,Node)
	with (add Commutator=GreaterThan);

grant execute on function LessThanOrEqual (Node,Node) to public;

create function GreaterThanOrEqual (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGreaterThanOrEqual)" language c;

alter function GreaterThanOrEqual (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGreaterThanOrEqual)");

alter function GreaterThanOrEqual (Node,Node)
	with (add parallelizable);

alter function GreaterThanOrEqual (Node,Node)
	with (add not variant);

alter function GreaterThanOrEqual (Node,Node)
	with (add negator=LessThan);

alter function GreaterThanOrEqual (Node,Node)
	with (add Commutator=LessThan);

grant execute on function GreaterThanOrEqual (Node,Node) to public;

create function Increment (Node,integer)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIncrCnt)" language c;

alter function Increment (Node,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIncrCnt)");

alter function Increment (Node,integer)
	with (add parallelizable);

alter function Increment (Node,integer)
	with (add not variant);

grant execute on function Increment (Node,integer) to public;

create function Increment (Node)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIncr)" language c;

alter function Increment (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIncr)");

alter function Increment (Node)
	with (add parallelizable);

alter function Increment (Node)
	with (add not variant);

grant execute on function Increment (Node) to public;

create function Length (Node)
returns integer
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLength)" language c;

alter function Length (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeLength)");

alter function Length (Node)
	with (add parallelizable);

alter function Length (Node)
	with (add not variant);

grant execute on function Length (Node) to public;

create function GetMember (Node,integer)
returns integer
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGetMember)" language c;

alter function GetMember (Node,integer)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGetMember)");

alter function GetMember (Node,integer)
	with (add parallelizable);

alter function GetMember (Node,integer)
	with (add not variant);

grant execute on function GetMember (Node,integer) to public;

create function GetParent (Node)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGetParent)" language c;

alter function GetParent (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGetParent)");

alter function GetParent (Node)
	with (add parallelizable);

alter function GetParent (Node)
	with (add not variant);

grant execute on function GetParent (Node) to public;

create function IsParent (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsParent)" language c;

alter function IsParent (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsParent)");

alter function IsParent (Node,Node)
	with (add parallelizable);

alter function IsParent (Node,Node)
	with (add not variant);

grant execute on function IsParent (Node,Node) to public;

create function IsChild (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsChild)" language c;

alter function IsChild (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsChild)");

alter function IsChild (Node,Node)
	with (add parallelizable);

alter function IsChild (Node,Node)
	with (add not variant);

grant execute on function IsChild (Node,Node) to public;

create function Ancestors (Node)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeAncestors)" language c;

alter function Ancestors (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeAncestors)");

alter function Ancestors (Node)
	with (add iterator);

grant execute on function Ancestors (Node) to public;

create function IsAncestor (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsAncestor)" language c;

alter function IsAncestor (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsAncestor)");

alter function IsAncestor (Node,Node)
	with (add parallelizable);

alter function IsAncestor (Node,Node)
	with (add not variant);

grant execute on function IsAncestor (Node,Node) to public;

create function IsDescendant (Node,Node)
returns boolean
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsDescendant)" language c;

alter function IsDescendant (Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeIsDescendant)");

alter function IsDescendant (Node,Node)
	with (add not variant);

grant execute on function IsDescendant (Node,Node) to public;

create function NewLevel (Node)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeNewLevel)" language c;

alter function NewLevel (Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeNewLevel)");

alter function NewLevel (Node)
	with (add parallelizable);

alter function NewLevel (Node)
	with (add not variant);

grant execute on function NewLevel (Node) to public;

create function Graft (Node,Node,Node)
returns Node
external name "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGraft)" language c;

alter function Graft (Node,Node,Node)
	with (Modify External Name = "$INFORMIXDIR/extend/Node.1.0/Node.bld(NodeGraft)");

alter function Graft (Node,Node,Node)
	with (add parallelizable);

alter function Graft (Node,Node,Node)
	with (add not variant);

grant execute on function Graft (Node,Node,Node) to public;

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UNOD1", "en_us.1252", "Invalid input string."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UNOD2", "en_us.1252", "Illegal character found in input string."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UNOD3", "en_us.1252", "Third input parameter is not descendant of first input parameter."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UNOD4", "en_us.1252", "Index to node element should be greater than or equal to 1."
);

commit work;

