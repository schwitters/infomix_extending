This page is available in html format at:

  http://www.informix.com/idn-secure/DataBlade/Library/SqlLib.htm

------------------------------------------------------------------------

                          SqlLib DataBlade Module

                         SqlLibC.1.1 / SqlLibJ.1.1

------------------------------------------------------------------------

The SqlLib DataBlade module implements SQL routines that the Informix
Dynamic Server does not support natively but that are supported by some
other database vendors. Source code is freely available for download and
includes two implementations, one in C (SqlLibC) and the other in Java
(SqlLibJ).

Contents

   * Overview

   * Required Software

   * Getting Started: Java

        o Download the Distribution
        o Build the bladelet
        o Install
        o Register
        o Restrictions

   * Getting Started: C

        o Download the Distribution
        o Build the bladelet
        o Install
        o Register
        o Restrictions

   * Supported Data Types

   * User-Defined Routines (UDRs)

        o ascii
        o ceil
        o chr
        o instr
        o instrb
        o sign
        o to_decimal
        o to_float
        o to_integer

   * Revision History

        o SqlLib 1.0
        o SqlLib 1.1

------------------------------------------------------------------------

Overview

Differences in database vendor SQL support make it difficult to migrate
applications between different database vendor products, especially if an
application relies on a SQL feature in one database that is not available
in the other.

The SqlLib DataBlade module adds SQL routines that the Informix Dynamic
Server (IDS) does not currently support natively but that are available in
other vendor databases. Two source code implementations, one in C and the
other in Java, are freely available for download "as is", so the rest of
this page uses the more informal term bladelet.

The C and Java implementations have the same functionality. The only
difference you might notice if you run them side by side is they output
different error messages. Since both implementations create UDRs with the
same names, they cannot be registered in the same database; each must be
registered in a different database.

------------------------------------------------------------------------

Required Software

To build and run SqlLib, you need IDS 9.21 installed on your system.
Depending on whether you want to use the C or Java version, you also need a
C compiler or the Java Development Kit (JDK) available from www.java.sun.

SqlLib was tested with the software releases listed below:

     SUN:

        * Solaris 2.7
        * IDS 9.21.UC1
        * SUNpro C Compiler
        * JDK 1.2

     NT:

        * Windows NT 4.0 with Service Pack 5
        * IDS 9.21.TC1
        * Microsoft Visual C++ 6.0
        * JDK 1.2

------------------------------------------------------------------------

Getting Started: Java

Download the Distribution

Download the SqlLibJ.1.1.tar.Z compressed tar archive, which contains the
Java version of the bladelet.

Uncompress it:

uncompress SqlLibJ.1.1.tar.Z

Extract the tar archive:

tar xvf SqlLibJ.1.1.tar

The distribution is extracted into a hierarchy under a directory named
SqlLibJ.1.1. The directory contents are summarized in the table below.

                                SqlLibJ.1.1

 Readme.txt                 Ascii file describing the contents of the
                            SqlLibJ.1.1 distribution.

 SqlLibErrors*.properties   Java properties files for locale-specific
                            error message txt.

 SqlLibJ.jar                Compiled Java code

 SqlLibJ.java               Java source code

 getClientLocale.bld        NT shared object file for the Locale bladelet.

 install.ksh                Simple install script

 mk.ksh                     Simple compile script

 register.sql               SQL registration script

 replace.sql                SQL script to replace the installed .jar file

 unregister.sql             SQL script to unregister SqlLibJ.1.1

 DBDK/                      Sample DataBlade registration scripts as
                            generated by the DBDK.

 DeploymentDescriptor/      Sample registration scripts using a Java
                            Deployment Descriptor.

 Locale/                    One-function C language bladelet to obtain the
                            client locale from within a UDR.

 Tests/                     Test scripts

Build the bladelet

One of the benefits of developing a DataBlade module using Java is that the
source can be compiled into a .jar file on any platform, and the same .jar
file can be deployed on any other supported platform.

You can compile the Java source code for SqlLibJ.1.1 with the simple mk.ksh
script in the top level directory of the distribution.

SqlLibJ.1.1, however, also contains a single UDR written in C, and that UDR
needs to be compiled into a shared object for each platform on which
SqlLibJ will be deployed.

This distribution includes the C module built for Solaris 2.7 and for NT
4.0:

   * The Solaris shared object is in the Locale/src/solaris-sparc
     subdirectory.
   * The NT dynamic link library (DLL) is in the Locale/src/WinNT-i386
     subdirectory. The top level directory of the distribution also
     contains a copy of the NT DLL, which will be placed in your
     installation directory when you run the install script. Be sure to
     replace this with the Solaris version if you are installing on that
     platform.

If you are not on one of these platforms or if you modify the C source
code, recompile the C routine using the instructions below. (If you only
modify the Java code, you can recompile that using the mk.ksh script.)

UNIX

     Locale/src/getClientLocaleU.mak builds the shared object for the
     getClientLocale UDR under UNIX.

     First, set the TARGET variable to the platform-specific include file.
     For example, on Solaris set it like this in the C-Shell:

     setenv TARGET $INFORMIXDIR/incl/dbdk/makeinc.solaris

     Next, build the shared object:

     make -f getClientLocaleU.mak

     Finally, copy the new getClientLocale.bld file from
     Locale/src/solaris-sparc/ to SqlLibJ.1.1/.

NT

     getclientlocale.mak builds the DLL for the getClientLocale UDR at the
     DOS prompt. You can build a debug or release version (debug is the
     default):

     nmake /f getclientlocale.mak CFG="getclientlocale - Win32 Debug"
     nmake /f getclientlocale.mak CFG="getclientlocale - Win32 Release"

     Note that it may be necessary to update getclientlocale.mak with the
     correct path information for your Microsoft Developer Studio
     installation.

     As was the case with UNIX above, copy the new getClientLocale.bld file
     to the top level SqlLibJ.1.1 directory, where the installation script
     will find it. The new NT copy of getClientLocale.bld is in
     Locale/src/WinNT-i386/.

Install

CURRENTDIR in the instructions below refers to the root location for this
bladelet distribution.

     Login as user informix, or, on NT, as a user who is a member of
     the Informix-Admin group.

     If you are installing on Solaris, or if you have recompiled the C
     language module, copy getClientLocale.bld from
     Locale/src/solaris-sparc/ or Locale/src/WinNT-i386/ to
     CURRENTDIR.

     Now, using either the korn shell or the bourne shell, run the
     install.ksh script to create the distribution directory
     ($INFORMIXDIR/extend/SqlLibJ.1.1/ and to populate it with the
     runtime files.

Register

Register the bladelet by running the register.sql script using SQLEditor or
dbaccess. For example:

% dbaccess your_db_name < register.sql

Restrictions

SqlLibJ cannot be registered in a database that already has SqlLibC
installed because the two bladelets create objects with identical names.

------------------------------------------------------------------------

Getting Started: C

Download the Distribution

Download the SqlLibC.1.1.tar.Z compressed tar archive, which contains the C
version of the bladelet.

Uncompress it:

uncompress SqlLibC.1.1.tar.Z

Extract the tar archive:

tar xvf SqlLibC.1.1.tar

The distribution is extracted into a hierarchy under a directory named
SqlLibC.1.1. The directory contents are summarized in the table below.

                                SqlLibC.1.1

 README                This file.

 tests/                Subdirectory with test scripts and sample output.

 scripts/              SQL registration scripts. The contents of this
                       directory should be copied to:

                       $INFORMIXDIR/extend/SqlLibC.1.1


 source/               Source code for the UDRs.
       SqlLibC.c             C Source code
       SqlLibC.h             Header
       SqlLibC.def           NT definition module file
       SqlLibC.mak           NT makefile
       SqlLibCU.mak          UNIX makefile
       solaris-sparc         Directory containing pre-built Solaris shared
                       object
       WinNT-i386            Directory containing pre-built NT DLL

 SqlLib.ibs            BladeSmith project for the C project generated with
                       BladeSmith version 4.00.TC1.

Build the bladelet

This distribution includes the DataBlade module built for Solaris 2.7 and
for NT 4.0:

   * The Solaris shared object is in the source/solaris-sparc subdirectory.
   * The NT dynamic link library (DLL) is in the source/WinNT-i386
     subdirectory.

If you are not on one of those platforms or if you modify the source code,
recompile the DataBlade module using the instructions below.

UNIX

     SqlLibCU.mak builds the DataBlade shared object under UNIX.

     First, set the TARGET variable to the platform-specific include file.
     For example, on Solaris set it like this in the C-Shell:

     setenv TARGET $INFORMIXDIR/incl/dbdk/makeinc.solaris

     Next, build the DataBlade module:

     make -f SqlLibCU.mak

     Compile output for Solaris looks like this:

     make  -f SqlLibCU.mak server
     cc -DMI_SERVBUILD -KPIC -I/informix/9.21/incl/public -I/informix/9.21/incl/esql -I/informix/9.21/incl -g -o solaris-sparc/SqlLibC.o -c SqlLibC.c
     ld -dy -G -Bsymbolic -o solaris-sparc/SqlLibC.bld               \
     solaris-sparc/SqlLibC.o                 \
      2> link.errs
     if test -x /informix/9.21/bin/filtersym.sh ;              \
     then /informix/9.21/bin/filtersym.sh link.errs ;  \
     else cat link.errs ;                                    \
     fi

     Error: The DataBlade module is not linked properly.
     The following symbol(s) could not be
     resolved by the linker.

     function name                       in file
     =======================================================================
     sprintf                             solaris-sparc/SqlLibC.o
     ceil                                solaris-sparc/SqlLibC.o
     strstr                              solaris-sparc/SqlLibC.o

     Disregard the Solaris message that the DataBlade was not linked
     properly. The standard C libraries are linked into the Solaris oninit,
     and the Informix server resolves sprintf, ceil, and strstr at runtime.

     Detailed instructions for building a UNIX shared object library are
     documented in the DataBlade Developers Kit User Guide, which is
     available for download from the Informix online documentation web
     site.

NT

     SqlLibC.mak builds the DataBlade DLL at the DOS prompt. You can build
     a debug or release version (debug is the default):

     nmake /f SqlLibC.mak CFG="SqlLibC - Win32 Debug"
     nmake /f SqlLibC.mak CFG="SqlLibC - Win32 Release"

     Below is sample build output for DevStudio 6.0:

     $ nmake /f SqlLibC.mak CFG="SqlLibC - Win32 Debug"

     Microsoft (R) Program Maintenance Utility   Version 6.00.8168.0
     Copyright (C) Microsoft Corp 1988-1998. All rights reserved.

             cl.exe /nologo /MTd /W3 /Gm /GX /ZI /Od /I "%INFORMIXDIR%\incl" /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL" /D "SQLLIBC_EXPORTS" /D "MI_SERVBUILD" /D "NT" /D "GL_NT_STATIC" /D "NT_MI_SAPI" /Fp".\Debug\SqlLibC.pch" /YX /Fo".\Debug\\" /Fd".\Debug\\" /FD /GZ  /c SqlLibC.c SqlLibC.c
             link.exe @C:\TEMP\nma00234.
        Creating library .\Debug\SqlLibC.lib and object .\Debug\SqlLibC.exp

     The resulting DLL gets output to Debug\SqlLibC.bld (remember this
     location later when you need to install the DLL).

     You can also load SqlLibC.1.1 source code into Microsoft DevStudio by
     following the instructions in the Building a DataBlade DLL using MS
     DevStudio technical note. It explains how to create a new project and
     add the *.c, *.h, and *.def files to that project.

     Note: BladeSmith was not used to manage SqlLibC.1.1 source code. Do
     not click on the Bladesmith MSDev button to load the SqlLibC.1.1
     source code into DevStudio.

Install

CURRENTDIR in the instructions below refers to the root location for this
bladelet distribution.

     Login as user informix, or, on NT, as a user who is a member of
     the Informix-Admin group.

     Unix:

     mkdir $INFORMIXDIR/extend/SqlLibC.1.1
     cd $CURRENTDIR
     cp ./source/solaris-sparc/SqlLibC.bld $INFORMIXDIR/extend/SqlLibC.1.1
     cp ./scripts/* $INFORMIXDIR/extend/SqlLibC.1.1

     NT (using MKS):

     mkdir $INFORMIXDIR/extend/SqlLibC.1.1
     cd $CURRENTDIR
     cp ./source/WinNT-i386/SqlLibC.bld $INFORMIXDIR/extend/SqlLibC.1.1
     cp ./scripts/* $INFORMIXDIR/extend/SqlLibC.1.1

     If you compiled the project on NT in debug mode, remember to copy
     ./source/Debug/SqlLibC.bld instead of
     ./source/WinNT-i386/SqlLibC.bld.

Register

Register the bladelet at the UNIX or DOS prompt:

blademgr
shm> register SqlLibC.1.1 your_db_name

If registration fails, check the following files:

   * /tmp/blademgr/*.log
   * $INFORMIXDIR/online.log

You can also run BladeManager from NT.

Restrictions

SqlLibC cannot be registered in a database that already has SqlLibJ
installed because the two bladelets create objects with identical names.

------------------------------------------------------------------------

Supported Data Types

The SqlLib bladelet does not create any new types. It supports the built-in
SQL types summarized in the table below. The table also shows the mappings
of the SQL types to C and Java.

            SQL                   C                    Java

      CHAR             mi_char                 char

      LVARCHAR         mi_lvarchar             String

      DEC              mi_decimal / mi_numeric java.math.BigDecimal

      DECIMAL          mi_decimal / mi_numeric java.math.BigDecimal

      DOUBLE PRECISION mi_double_precision     double

      FLOAT            mi_double_precision     double

      INT              mi_integer              int

      INT8             mi_int8                 long

      INTEGER          mi_integer              int

      NUMERIC          mi_numeric / mi_decimal java.math.BigDecimal

      REAL             mi_real                 float

      SMALLFLOAT       mi_real                 float

      SMALLINT         mi_smallint             short

------------------------------------------------------------------------

User-Defined Routines (UDRs)

ascii

Description

ascii() takes a single character as input and returns the ASCII value, in
decimal, that corresponds to that character.

Syntax

ascii (char) returns integer

Example

The next query returns the ASCII value of the letter "a":

> execute function ascii('a');

(expression)

          97

1 row(s) retrieved.

The next query returns the ASCII value for the space character:

> execute function ascii(' ');

(expression)

          32

1 row(s) retrieved.

See Also

See the description of chr.

------------------------------------------------------------------------

ceil

Description

ceil() takes a single numeric value as input and returns the smallest
integer that is either equal to or greater than the input value.

Syntax

ceil (numeric value) returns integer

Example

The queries below demonstrate the basic functionality:

> execute function ceil(123.456);

(expression)

         124

1 row(s) retrieved.

> execute function ceil(-123.456);

(expression)

        -123

1 row(s) retrieved.

> execute function ceil(0.00);

(expression)

           0

1 row(s) retrieved.

You can pass ceil() any numeric value, but if the value exceeds the size of
an integer, you get error 1215:

> execute function ceil(1234567890123456::decimal);

(expression)

 1215: Value exceeds limit of INTEGER precision

------------------------------------------------------------------------

chr

Description

chr() takes an integer value and returns the character that is represented
by the ASCII value (in decimal) of that integer.

The integer value must be between 0 and 127.

Syntax

chr (integer) returns char

Example

The next query returns the character value for ASCII code 97:

> execute function chr(97);

(expression)

          a

1 row(s) retrieved.

The next query returns the character value for ASCII code 32 (the space
character):

> execute function chr(32);

(expression)

1 row(s) retrieved.

Since ascii() and chr() are symmetric, nesting calls sometimes make test
results more visible:

> execute function ascii(chr(32));

(expression)

          32

1 row(s) retrieved.

See Also

See the description of ascii.

------------------------------------------------------------------------

instr

Description

instr() searches for a value in a string, and returns the position where it
was found. It returns 0 if the search value was not found.

instr() handles multi-byte character sets, but can also be used for
single-byte character sets. instrb() provides the same functionality for
fixed, single byte character sets.

Syntax

instr (lvarchar, lvarchar) returns integer instr (lvarchar, lvarchar,
integer) returns integer instr (lvarchar, lvarchar, integer, integer)
returns integer

Arguments:

      1. lvarchar  String to search.
      2. lvarchar  Value to search for in the string. The value can be
                   composed of one or more characters.
      3. integer   Optional starting point.
                   The default starting point is 1, the first character in
                   the string.
                   If the starting point is positive, the start position
                   is the nth character from the beginning of the string,
                   and the search moves from left to right (forward)
                   through the string.
                   If the starting point is negative, the start position
                   is the nth character from the end of the string, and
                   the search moves from right to left (backwards) through
                   the string.
                   Whether the starting point is positive or negative, the
                   result is the number of characters from the beginning
                   of the string.
      4. integer   Optional occurrence.
                   The default occurrence is 1, the first occurrence.
                   The occurrence must be positive.

Example

This first query returns the position for the first occurrence of the
letter 'I' in the string 'INFORMIX':

> execute function instr ('INFORMIX', 'I');

(expression)

           1

1 row(s) retrieved.

The previous query is equivalent to the next one that specifies the start
position and occurrence:

> execute function instr ('INFORMIX', 'I', 1, 1);

(expression)

           1

1 row(s) retrieved.

This next query returns the second occurrence of the letter 'I':

> execute function instr ('INFORMIX', 'I', 1, 2);

(expression)

           7

1 row(s) retrieved.

The search value can be composed of more than one character:

> execute function instr ('Mississippi', 'is');

(expression)

           2

1 row(s) retrieved.

> execute function instr ('Mississippi', 'is', 1, 2);

(expression)

           5

1 row(s) retrieved.

If the starting point is negative, the search starts that number of
characters from the end of string and proceeds backwards. For example, in
this next query, the search for the space character starts on the third
character from the end of the string, the 'W' in 'WEB'. The second
occurrence of the space in the backwards search is the first space in the
string.

> execute function instr ('WAY TO WEB', ' ', -3, 2);

(expression)

           4

1 row(s) retrieved.

In this next example, the search starts at the third character from the end
(the "t" in "south"), a finds the first occurrence at the same spot
(character 35):

> execute function instr("The Mississippi flows north to south.", "th", -3);

(expression)

          35

1 row(s) retrieved.

Moving backwards, the second occurrence is found at the "th" in "north":

> execute function instr("The Mississippi flows north to south.", "th", -3, 2);

(expression)

          26

1 row(s) retrieved.

Finally, if the match is not found, 0 is returned (notice that the search
is case-sensitive):

> execute function instr("The Mississippi flows north to south.", "z");

(expression)

           0

1 row(s) retrieved.

See Also

See the description of instrb.

------------------------------------------------------------------------

instrb

Description

instrb() searches for a value in a string, and returns the position where
it was found. It returns 0 if the search value was not found.

instrb() provides the exact same functionality as instr() but for
single-byte character sets.

Syntax

instrb (lvarchar, lvarchar) returns integer instrb (lvarchar, lvarchar,
integer) returns integer instrb (lvarchar, lvarchar, integer, integer)
returns integer

For a description of arguments and sample usage, see instr.

------------------------------------------------------------------------

sign

Description

sign() takes a numeric argument and returns an integer that indicates if
the input value is positive (1), negative (-1), or zero (0).

Syntax

sign (numeric value) returns integer

Example

> execute function sign(-52);

(expression)

          -1

1 row(s) retrieved.

> execute function sign(0);

(expression)

           0

1 row(s) retrieved.

> execute function sign(52);

(expression)

           1

1 row(s) retrieved.

------------------------------------------------------------------------

to_decimal

Description

to_decimal() converts the input character argument into a decimal type.

Syntax

to_decimal (character value) returns decimal
to_decimal (character value, character format) returns decimal

Arguments:

      1. lvarchar  The value to convert to decimal.
      2. lvarchar  Optional format of the data in the first argument
                   (SqlLibC only).

Example

> execute function to_decimal('123456.789');

    (expression)

123456.789000000

1 row(s) retrieved.

By default, to_decimal assumes that the value stored in the string is in
decimal format. If you give it a value in another number system, it may
return an incorrect result or raise an error. For example, consider the
following octal and hexidecimal values:

> execute function to_decimal("314");

    (expression)

314.000000000000

1 row(s) retrieved.

> execute function to_decimal('13A');

    (expression)

 1213: Character to numeric conversion error

SqlLibC supports an optional argument that lets you specify the format of
the value stored in the first argument:

> execute function to_decimal('314', '%o'); -- octal value

    (expression)

204.000000000000

1 row(s) retrieved.

> execute function to_decimal('13A', '%x'); -- hexidecimal value

    (expression)

314.000000000000

1 row(s) retrieved.

For a complete list of the format flags, see the description of
ifx_gl_convert_number() in the INFORMIX-GLS Programmer's Manual.

------------------------------------------------------------------------

to_float

Description

to_float() converts the input character argument into a float type.

Syntax

to_float (character value) returns float
to_float (character value, character format) returns float

Arguments:

      1. lvarchar  The value to convert to float.
      2. lvarchar  Optional format of the data in the first argument
                   (SqlLibC only).

Example

> execute function to_float('123456.789');

  (expression)

123456.7890000

1 row(s) retrieved.

By default, to_float assumes that the value stored in the string is in
decimal format. If you give it a value in another number system, it may
return an incorrect result or raise an error. For example, consider the
following octal and hexidecimal values:

> execute function to_float('314');

  (expression)

314.0000000000

1 row(s) retrieved.

> execute function to_float('13A');

  (expression)

 1213: Character to numeric conversion error

SqlLibC supports an optional argument that lets you specify the format of
the value stored in the first argument:

> execute function to_float('314', '%o'); -- octal value

  (expression)

204.0000000000

1 row(s) retrieved.

> execute function to_float('13A', '%x'); -- hexidecimal value

  (expression)

314.0000000000

1 row(s) retrieved.

For a complete list of the format flags, see the description of
ifx_gl_convert_number() in the INFORMIX-GLS Programmer's Manual.

------------------------------------------------------------------------

to_integer

Description

to_integer() converts the input character argument into an integer type.

Syntax

to_integer (character value) returns integer
to_integer (character value, character format) returns integer

Arguments:

      1. lvarchar  The value to convert to integer.
      2. lvarchar  Optional format of the data in the first argument
                   (SqlLibC only).

Example

> execute function to_integer('123456');

(expression)

      123456

1 row(s) retrieved.

By default, to_integer assumes that the value stored in the string is in
decimal format. If you give it a value in another number system, it may
return an incorrect result or raise an error. For example, consider the
following octal and hexidecimal values:

> execute function to_integer('314');

(expression)

         314

1 row(s) retrieved.

> execute function to_integer('13A');

(expression)

 1213: Character to numeric conversion error

SqlLibC supports an optional argument that lets you specify the format of
the value stored in the first argument:

> execute function to_integer('314', '%o'); -- octal value

(expression)

         204

1 row(s) retrieved.

> execute function to_integer('13A', '%x'); -- hexidecimal value

(expression)

         314

1 row(s) retrieved.

For a complete list of the format flags, see the description of
ifx_gl_convert_number() in the INFORMIX-GLS Programmer's Manual.

------------------------------------------------------------------------

Revision History

SqlLib 1.0

These UDRs were implemented in SqlLib 1.0:

   * ascii
   * ceil
   * chr
   * instr
   * instrb
   * sign

SqlLib 1.1

These UDRs were added for SqlLib 1.1:

   * to_decimal
   * to_float
   * to_integer

------------------------------------------------------------------------

Last modified on Sunday, 10-Dec-00 13:16:39. Please send your comments or
questions concerning this page to idn-datablades@informix.com.

------------------------------------------------------------------------

