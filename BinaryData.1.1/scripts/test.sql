-- Generated by BladeSmith 4.00.TC1B2DO NOT MODIFY. --

execute procedure ifx_allow_newline('t');

begin work;

create opaque type BinaryType(
	internallength = variable,
	alignment = 1
);

grant usage on type BinaryType to public;

create function BinaryTypeIn (lvarchar)
returns BinaryType
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeInput)" language c;

alter function BinaryTypeIn (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeInput)");

grant execute on function BinaryTypeIn (lvarchar) to public;

create implicit cast
	(
		lvarchar as BinaryType
		with  BinaryTypeIn
	);

create function BinaryTypeOut (BinaryType)
returns lvarchar
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeOutput)" language c;

alter function BinaryTypeOut (BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeOutput)");

grant execute on function BinaryTypeOut (BinaryType) to public;

create cast
	(
		BinaryType as lvarchar
		with  BinaryTypeOut
	);

create function BinaryTypeSend (BinaryType)
returns sendrecv
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeSend)" language c;

alter function BinaryTypeSend (BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeSend)");

grant execute on function BinaryTypeSend (BinaryType) to public;

create cast
	(
		BinaryType as sendrecv
		with  BinaryTypeSend
	);

create function BinaryTypeRecv (sendrecv)
returns BinaryType
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeReceive)" language c;

alter function BinaryTypeRecv (sendrecv)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeReceive)");

grant execute on function BinaryTypeRecv (sendrecv) to public;

create implicit cast
	(
		sendrecv as BinaryType
		with  BinaryTypeRecv
	);

create function BinaryTypeImpT (impexp)
returns BinaryType
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeImportText)" language c;

alter function BinaryTypeImpT (impexp)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeImportText)");

grant execute on function BinaryTypeImpT (impexp) to public;

create implicit cast
	(
		impexp as BinaryType
		with  BinaryTypeImpT
	);

create function BinaryTypeExpT (BinaryType)
returns impexp
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeExportText)" language c;

alter function BinaryTypeExpT (BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeExportText)");

grant execute on function BinaryTypeExpT (BinaryType) to public;

create cast
	(
		BinaryType as impexp
		with  BinaryTypeExpT
	);

create function BinaryTypeImpB (impexpbin)
returns BinaryType
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeImportBinary)" language c;

alter function BinaryTypeImpB (impexpbin)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeImportBinary)");

grant execute on function BinaryTypeImpB (impexpbin) to public;

create implicit cast
	(
		impexpbin as BinaryType
		with  BinaryTypeImpB
	);

create function BinaryTypeExpB (BinaryType)
returns impexpbin
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeExportBinary)" language c;

alter function BinaryTypeExpB (BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeExportBinary)");

grant execute on function BinaryTypeExpB (BinaryType) to public;

create cast
	(
		BinaryType as impexpbin
		with  BinaryTypeExpB
	);

create function Compare (BinaryType,BinaryType)
returns integer
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeCompare)" language c;

alter function Compare (BinaryType,BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeCompare)");

alter function Compare (BinaryType,BinaryType)
	with (add not variant);

grant execute on function Compare (BinaryType,BinaryType) to public;

create function Equal (BinaryType,BinaryType)
returns boolean
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeEqual)" language c;

alter function Equal (BinaryType,BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeEqual)");

alter function Equal (BinaryType,BinaryType)
	with (add not variant);

grant execute on function Equal (BinaryType,BinaryType) to public;

create function NotEqual (BinaryType,BinaryType)
returns boolean
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeNotEqual)" language c;

alter function NotEqual (BinaryType,BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(BinaryTypeNotEqual)");

alter function NotEqual (BinaryType,BinaryType)
	with (add not variant);

grant execute on function NotEqual (BinaryType,BinaryType) to public;

create procedure WriteIt (BinaryType)
external name "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(WriteIt)" language c;

alter procedure WriteIt (BinaryType)
	with (Modify External Name = "$INFORMIXDIR/extend/BinaryData.1.1/BinaryData.bld(WriteIt)");

alter procedure WriteIt (BinaryType)
	with (add not variant);

grant execute on procedure WriteIt (BinaryType) to public;

commit work;

