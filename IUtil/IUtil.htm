<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
<head>
        <title>IUtil Compatibility Component</title>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
        <meta name="keywords" content=" ">
        <meta name="description" content=" ">
        <meta name="author" content=" ">
        <link rel="stylesheet" href="/idn-secure/DataBlade/Include/tech_note.css">

</head>
<body bgcolor="#FFFFFF">

<!-- BEGIN VIRTUAL INCLUDE FOR TOP NAVIGATION BAR -->
<!--#include virtual="/informix/include/idn_top.htm"-->
<!-- END VIRTUAL INCLUDE FOR TOP NAVIGATION BAR   -->

<!-- BEGIN VIRTUAL INCLUDE FOR DATABLADE BAR -->
<!--#include virtual="/idn/Include/db_leaf.htm"-->
<!-- END VIRTUAL INCLUDE FOR TOP DATABLADE BAR   -->           

<!-- BEGIN MAIN CONTENTS AREA. ENTER CONTENTS ONLY BELOW THIS POINT -->

<h1>IUtil Component</h1>

<hr>

<p class=abstract>
Like the SqlLib DataBlade module, the 
<span class=datablade>IUtil</span>
Component
implements SQL routines that the Informix Dynamic Server 
does not support natively
but that are supported by some other database vendors.
IUtil is implemented using the C language, and the
source code is freely available for download.
</p>

<h2><a name="contents">Contents</a></h2>

<ul class=toc>
        <li> <p><a href="#overview">Overview</a></p> </li>

        <li><p><a href="#requirements">Required Software</a></p></dt></li>

        <li><p><a href="#start_c">Getting Started</a></p>

        <ul>
	<li><a href="#download_c">Download the Distribution</a> </li>
	<li><a href="#build_c">   Build the executable</a></li>
	<li><a href="#install_c"> Install </a></li>
	<li><a href="#register_c">Register </a></li>
	<li><a href="#restrictions_c">Restrictions </a></li>
        </ul>

        </li>
        <li><p><a href="#types">Supported Data Types</a></p></li>

        <li><p><a href="#source">User-Defined Routines (UDRs)</a></p>

	<ul>
	<li> <a href="#ascii">     ascii </a> </li>
	<li> <a href="#ceil">      ceil</a></li>
	<li> <a href="#chr">       chr</a></li>
	<li> <a href="#iday">      iday</a></li>
	<li> <a href="#dayname">   dayname</a></li>
	<li> <a href="#dayofweek"> dayofweek</a></li>
	<li> <a href="#dayofyear"> dayofyear</a></li>
	<li> <a href="#degrees">   degrees</a></li>
	<li> <a href="#floor">     floor</a></li>
	<li> <a href="#radians">   radians</a></li>
	<li> <a href="#sign">      sign</a></li>
	</ul>
	<p></p>
	</li>

        <li><p><a href="#history">Revision History</a></p>
	</li>
</ul>

<hr>
<h2><a name="overview">Overview</a></h2>

<p>
Differences in database vendor SQL support make it difficult to
migrate applications between different database vendor products,
especially if an application relies on a SQL feature in one
database that is not available in the other.
</p>

<p>The <span class=datablade>IUtil</span>
component was developed to help a customer migrate an
application from IBM DB2 to Informix IDS. It implements
a specific subset of the proprietary functions that are
built into DB2, and it can be extended to include virtually
any others that you may require.</p>

<hr>

<h2>A Note On Terminology</h2>

<p>User-implemented extensions to IDS have variously been
called &quot;DataBlades&quot;, &quot;DataBlade modules&quot;,
&quot;Bladelets&quot;, &quot;Components&quot;, &quot;Plug-ins&quot;,
and probably other things as well. For the purposes of this 
discussion, all of these expressions mean the same thing.</p>

<p>Since the author of IUtil chose to refer to it as a 
&quot;component&quot;, we'll use that term for it in this
writeup.</p>

<p><a href="#contents">Contents</a></p>

<hr>
<h2><a name="requirements">Required Software</a></h2>

<p>
To run <span class=datablade>IUtil</span>, you need IDS 9.21 
installed on your system. To rebuild the executable, you'll
also need a C compiler.  </p>

<p>The IUtil distribution comes with a pre-built shared object
for Solaris and NT.</p>

<p><span class=datablade>IUtil</span> was tested with the followint
software releases: </p>

<blockquote>
    <p><span class=underline>SUN:</span> </p>
    <ul>
        <li>Solaris 2.7          </li>
        <li>IDS 9.21.UC1         </li>
        <li>SUNpro C Compiler    </li>
    </ul>

    <p><span class=underline>NT:</span> </p>
    <ul>
        <li>Windows NT 4.0 with Service Pack 5</li>
        <li>IDS 9.21.TC1                 </li>
        <li>Microsoft Visual C++ 6.0     </li>
    </ul>
</blockquote>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="start_c">Getting Started</a></h2>

<h3><a name="download_c">Download the Distribution</a> </h3>

<p>Download 
<a href="/idn-secure/foundation/Bladelets/SWDownload/IUtil.zip">
IUtil.zip</a>, which contains the IUtil distribution, and 
extract the files from the zip archive.
</p>

<p>The distribution is organized in a 
hierarchy under a directory named <span class=filename>IUtil</span>. 
The directory contents are summarized in the table below.
</p>

<table border="1" cellpadding="5">
    <tr>
	<th colspan=2> IUtil</th>
    </tr>
    <tr>
        <td valign="top"><span class=filename>IUtil.htm</span></td>
        <td valign="top"><span class=tbl-nop>This file.</span></td>
    </tr>
    <tr>
        <td valign="top"><span class=filename>demo/</span></td>
        <td valign="top">
	<span class=tbl-nop>Subdirectory with test scripts and sample output.</span>
        </td>
    </tr>
    <tr>
        <td valign="top"><span class=filename>scripts/</span></td>
        <td valign="top"><span class=tbl-nop>SQL registration scripts. 
		The contents of this directory should be copied to: </span>
	<pre class=code-block>
$INFORMIXDIR/extend/IUtil </pre>
        </td>
    </tr>
    <tr>
        <td valign="top"><span class=filename>src/</span>
	<br>
	&nbsp; &nbsp; &nbsp; IUtil_NT.mak
	<br>
	&nbsp; &nbsp; &nbsp; SOL.mak
	<br>
	&nbsp; &nbsp; &nbsp; WinNT-i386/
	<br>
	&nbsp; &nbsp; &nbsp; bin/
	<br>
	&nbsp; &nbsp; &nbsp; SOL/
        <br>
        &nbsp; &nbsp; &nbsp; Debug/
	<br>
	&nbsp; &nbsp; &nbsp; c/
	<br>
	</td>
        <td valign="top"><span class=tbl-nop>Source code for the UDRs.  </span>
	<br>
	&nbsp; &nbsp; &nbsp; Makefile for NT
	<br>
	&nbsp; &nbsp; &nbsp; Makefile for Solaris
	<br>
	&nbsp; &nbsp; &nbsp; Build directory for NT
	<br>
	&nbsp; &nbsp; &nbsp; Build directory for Solaris
	<br>
	&nbsp; &nbsp; &nbsp; Working directory for Solaris
	<br>
        &nbsp; &nbsp; &nbsp; Working direcotory for NT
        <br>
	&nbsp; &nbsp; &nbsp; Source code directory
	<br>
		</td>
    </tr>
</table>


<h3><a name="build_c">Build the shared object</a> </h3>

<p>
This distribution includes the component built for
Solaris 2.7 and for NT 4.0:
</p>

<ul>
	<li> The Solaris shared object is in the 
	<span class=filename>src/bin</span> subdirectory.
	</li>
	<li> The NT dynamic link library (DLL) is in the
	<span class=filename>src/WinNT-i386</span> subdirectory.
	</li>
</ul>
<p>
If you are not
on one of those platforms or if you modify the source code, 
recompile the DataBlade module using the instructions below.
</p>

<dl>

<dt><span class=underline>UNIX</span></dt>
<dd>
<p><span class=filename>SOL.mak</span> builds the 
component shared object under UNIX. Build the
shared object with this command:
</p>

<pre class=code-block>
make -f SOL.mak
</pre>

<p>Detailed instructions for building a UNIX shared object library are
documented in the 
<span class=title>DataBlade Developers Kit User Guide</span>,
which is available for download from the Informix 
<a href="/answers">online documentation web site</a>.</p>

</dd>

<dt><span class=underline>NT</span></dt>
<dd>

<p><span class=filename>IUtil_NT.mak</span> builds
the DataBlade DLL at the DOS prompt. You can build
a debug or release version (debug is the default):
</p>

<pre class=code-block>
nmake /f IUtil_NT.mak CFG="SqlLibC - Win32 Debug"
nmake /f IUtil_NT.mak CFG="SqlLibC - Win32 Release"
</pre> 

<p>Note that it may be necessary to edit IUtil_NT.mak
to include the correct path for the DevStudio header
files and libraries on your machine.</p>


<p>
The DLL gets output to <span class=filename>Debug\IUtil.bld</span>
</p>

<p>You can also load <span class=datablade>IUtil</span>
source code into Microsoft DevStudio by following
the instructions in the 
<a href="/idn-secure/DataBlade/Library/nt_dll.htm">
<span class=title>Building a DataBlade DLL using MS DevStudio</span></a>
technical note.  It explains how to create a new project and add the 
<span class=filename>*.c</span>, 
<span class=filename>*.h</span>, and
<span class=filename>*.def</span> files to that project.
</p>

</dd>

</dl>
<h3><a name="install_c">Install</a></h3>

<p>
<span class=obj-name>CURRENTDIR</span> in the instructions below refers
to the root location for this component distribution.
</p>

<blockquote>
<p>Login as user <em>informix</em>, or, on NT, as a user who is a member
of the Informix-Admin group.  </p>

<p><span class=underline>Unix:</span></p>
<pre class=code-block>
mkdir $INFORMIXDIR/extend/IUtil
cd $CURRENTDIR
cp ./src/bin/IUtil.bld $INFORMIXDIR/extend/IUtil/
cp ./scripts/* $INFORMIXDIR/extend/IUtil/
</pre>

<p><span class=underline>NT (using MKS):</span></p>

<pre class=code-block>
mkdir $INFORMIXDIR/extend/IUtil
cd $CURRENTDIR
cp ./src/WinNT-i386/IUtil.bld $INFORMIXDIR/extend/IUtil
cp ./scripts/* $INFORMIXDIR/extend/IUtil
</pre>

</blockquote>

<h3><a name="register_c">Register</a></h3>

<p>Register the bladelet at the UNIX prompt: </p>

<pre class=code-block>
    dbaccess -e < $INFORMIXDIR/extend/IUtil/register.sql 
</pre>

<p>Or at the DOS prompt: </p>

<pre class=code-block>
    dbaccess -e < %INFORMIXDIR%\extend\IUtil\register.sql
</pre>

<h3><a name="restrictions_c">Restrictions </a></h3>

<p>
IUtil cannot be registered in a database that already has
SqlLibC or SqlLibJ installed because all three create 
some objects with identical names.
</p>

<p><a href="#contents">Contents</a></p>

<hr>

<h2><a name="types">Supported Data Types</a></h2>

<p>
The
<span class=datablade>IUtil</span>
component does not create any new types.
It supports the built-in date and datetime SQL types, as
well as decimal and double precision.
</p>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="source">User-Defined Routines (UDRs)</a></h2>

<h2><a name="ascii">ascii </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>ascii()</span>
takes a single character as input and returns the ASCII value, 
in decimal, that corresponds to that character.
</p>

<h3>Syntax</h3>

<p><span class=syntax>ascii (char) returns integer</span></p>

<h3>Example</h3>

<p>
The next query returns the ASCII value of the letter &quot;a&quot;:
</p>

<pre class=code-block>
&gt; execute function ascii('a');

(expression)

          97

1 row(s) retrieved.
</pre>

<p>
The next query returns the ASCII value for the space character:
</p>

<pre class=code-block>
&gt; execute function ascii(' ');

(expression)

          32

1 row(s) retrieved.
</pre>

<h3>See Also</h3>

<p>
See the description of <a href="#chr">chr</a>.
</p>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="ceil">ceil </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>ceil()</span>
takes a single numeric value as input and returns the 
smallest integer that is either equal to or greater than 
the input value.
</p>

<h3>Syntax</h3>

<p><span class=syntax>ceil (numeric value) returns integer</span></p>

<h3>Example</h3>

<p>
The queries below demonstrate the basic functionality:
</p>

<pre class=code-block>
&gt; execute function ceil(123.456);

(expression)

         124

1 row(s) retrieved.

&gt; execute function ceil(-123.456);

(expression)

        -123

1 row(s) retrieved.

&gt; execute function ceil(0.00);

(expression)

           0

1 row(s) retrieved.
</pre>

<p>
You can pass <span class=code-inline>ceil()</span> any numeric
value, but if the value exceeds the size of an integer, you
get error 1215:
</p>

<pre class=code-block>
&gt; execute function ceil(1234567890123456::decimal);

(expression)

 1215: Value exceeds limit of INTEGER precision
</pre>

<h3>See Also</h3>

<p>
See the description of <a href="#floor">floor</a>.
</p>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="chr">chr </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>chr()</span>
takes an integer value and returns the character that 
is represented by the ASCII value (in decimal) of that integer.
</p>

<p>
The integer value must be between 0 and 127.
</P>

<h3>Syntax</h3>

<p><span class=syntax>chr (integer) returns char</span></p>

<h3>Example</h3>

<p>
The next query returns the character value for ASCII code 97:
</p>

<pre class=code-block>
&gt; execute function chr(97);

(expression)

          a

1 row(s) retrieved.
</pre>

<p>
The next query returns the character value for ASCII code 32
(the space character):
</p>

<pre class=code-block>
&gt; execute function chr(32);

(expression)


1 row(s) retrieved.
</pre>

<p>Since
<span class=code-inline>ascii()</span> and
<span class=code-inline>chr()</span> are symmetric,
nesting calls sometimes make test results more visible:
</p>

<pre class=code-block>
&gt; execute function ascii(chr(32));

(expression)

          32

1 row(s) retrieved.
</pre>

<h3>See Also</h3>

<p>
See the description of <a href="#ascii">ascii</a>.
</p>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="dayname">dayname </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>dayname()</span>
takes a date or datetime argument and returns 
the day of the week for the input argument.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>dayname (date) returns varchar(100)</span>
<span class=syntax>dayname (datetime) returns varchar(100)</span>
</p>

<h3>Example</h3>

<p>
Return the day of the week for the date September 2, 1992:
</p>

<pre class=code-block>
&gt; execute function dayname ("9/2/1992"::date)

(expression)

           Wednesday

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="dayofweek">dayofweek </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>dayofweek()</span>
takes a date or datetime argument and returns 
an integer representing the day of the week
for the input date.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>dayofweek (date) returns integer</span>
<span class=syntax>dayofweek (datetime) returns integer</span>
</p>

<h3>Example</h3>

<p>
Return the day of the week for the date September 2, 1992:
</p>

<pre class=code-block>
&gt; execute function dayofweek ("9/2/1992"::date)

(expression)

         4

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="dayofyear">dayofyear </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>dayofyear()</span>
takes a date or datetime argument and returns 
an integer representing the day of the year
for the input date.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>dayofyear (date) returns integer</span>
<span class=syntax>dayofyear (datetime) returns integer</span>
</p>

<h3>Example</h3>

<p>
Return the day of the year for the date September 2, 1992:
</p>

<pre class=code-block>
&gt; execute function dayofyear ("9/2/1992"::date)

(expression)

         246

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="degrees">degrees </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>degrees()</span>
takes a numeric argument representing radians and
converts it to degrees.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>degrees (decimal) returns double precision</span>
<span class=syntax>iday (double precision) returns double precision</span>
</p>

<h3>Example</h3>

<p>
Convert the radian value &quot;1&quot; to degrees:
</p>

<pre class=code-block>
&gt; execute function degrees (1::double precision);

(expression)

 57.29577951308

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="floor">floor </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>floor()</span>
takes a numeric value as input and returns the largest integer that is
equal to or less than the input value.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>floor (numeric value) returns integer</span>
</p>

<h3>Examples</h3>

<pre class=code-block>
&gt; execute function floor (123.456);

(expression)

           123

1 row(s) retrieved.
</pre>

<pre class=code-block>
&gt; execute function floor (-123.456);

(expression)

           -124

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>
<h2><a name="iday">iday </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>iday()</span>
takes a date or datetime argument and returns 
its day component.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>iday (date) returns integer</span>
<span class=syntax>iday (datetime) returns integer</span>
</p>

<h3>Example</h3>

<p>
Return the day component for the date September 2, 1992:
</p>

<pre class=code-block>
&gt; execute function iday ("9/2/1992"::date)

(expression)

           2

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="radians">radians </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>radians()</span>
takes a value representing a measurement in degrees
and converts its value to radians.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>radians (decimal) returns double precision</span>
<span class=syntax>radians (double precision) returns double precision</span>
</p>

<h3>Example</h3>

<p>
Convert 57.3 degrees to radians:
</p>

<pre class=code-block>
&gt; execute function radians ("57.3"::double precision);

(expression)

 1.000073661393

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="sign">sign </a></h2>

<h3>Description</h3>

<p>
<span class=code-inline>sign()</span>
takes a numeric argument. It returns -1 if the value
of the argument is less than 0, 0 if the value is 0,
or +1 if the value is greater than 0.
</p>

<h3>Syntax</h3>

<p>
<span class=syntax>sign (decimal) returns integer</span>
<span class=syntax>sign (double precision) returns integer</span>
</p>

<h3>Examples</h3>

<pre class=code-block>
&gt; execute function sign (195);

(expression)

           1

1 row(s) retrieved.
</pre>

<pre class=code-block>
&gt; execute function sign (-1.6);

(expression)

          -1

1 row(s) retrieved.
</pre>

<p><a href="#contents">Contents</a></p>
<hr>

<h2><a name="history">Revision History</a></h2>

<p>This is the first release of IUtil.</p>

<p><a href="#contents">Contents</a></p>

<!-- END MAIN CONTENTS AREA. ENTER CONTENTS ONLY ABOVE THIS POINT -->

<!-- BEGIN CUSTOM FOOTER -->
<hr><p>Last modified on <b><!--#echo var="LAST_MODIFIED" --></b>.
Please send your comments or questions concerning this page to
<a href="mailto:idn-datablades@informix.com?subject=Comments on 
<!--#echo var="DOCUMENT_URI" -->"><nobr>idn-datablades@informix.com</nobr></a>.
</p><hr>
<!-- END CUSTOM FOOTER -->

<!-- BEGIN VIRTUAL INCLUDE FOR THE FOOTER -->
<!--#include virtual="/informix/include/abs_footeralone.htm"-->
<!-- END VIRTUAL INCLUDE FOR THE FOOTER -->

</body>
</html>                                             
