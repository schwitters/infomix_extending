
# TARGET must be set to the location/filename
# of the platform-specific make include file.
include $(TARGET)

# This make file assumes a directory structure  that is  similar to
# the directory structure in which the source files were originally
# generated by BladeSmith.  This is:
#
#                              src  <- the makefile goes here
#                              /\
#                       ActiveX  c
#
# Because the directory structure is the same,  files can be copied
# from NT to UNIX (and back) by first NFS  mounting  your UNIX file
# system and then using Windows NT Explorer to copy the files.

# =================================================================


#  {{FUNCTION(a4ad226d-1dcd-11D3-8a74-00c04f79b326) (PreserveSection)

# This is the project title.
PROJECT_TITLE = regexp

# The linked DataBlade module is placed here.
BINDIR = $(OS_NAME)-$(PLATFORM)

# Platform independent code goes here.
# The following code was generated by BladeSmith.

MI_INCL   = $(INFORMIXDIR)/incl
CFLAGS    = -DMI_SERVBUILD $(CC_PIC) -I$(MI_INCL)/public -I$(MI_INCL)/esql -I$(MI_INCL) $(COPTS)
LINKFLAGS = $(SHLIBLFLAG) $(SYMFLAG)
LIBS      =

# This is a list of the C object files.
PROJECTC_OBJS = \
	$(BINDIR)/sqlfuncs.$(OBJSUFF) \
	$(BINDIR)/regerror.$(OBJSUFF) \
	$(BINDIR)/regexp.$(OBJSUFF) \
	$(BINDIR)/regsub.$(OBJSUFF)

PROJECT_LIBS = $(BINDIR)/$(PROJECT_TITLE).$(BLDLIB_SUFF)

all : $(BINDIR)
	$(MAKE) $(MAKEFLAGS) -f makefile server $(BUILD_TARGET) ;


# Construct each object file.

$(BINDIR)/sqlfuncs.$(OBJSUFF) : c/sqlfuncs.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/regerror.$(OBJSUFF) : c/regerror.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/regexp.$(OBJSUFF) : c/regexp.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/regsub.$(OBJSUFF) : c/regsub.c
	$(CC) $(CFLAGS) -o $@ -c $?

#c/sqlfuncs.c :  c/sqlfuncs.h c/trace.h
#c/regexp.c :  c/sqlexec.h c/trace.h



# Construct the shared library.
# Do *NOT* link with client side  libraries.  You  will  see  many
# undefined symbols during linking.  This  is  normal  since those
# symbols are resolved when the server loads  your  shared object.
#
# ATTENTION:
# The  ld  "Symbol referencing errors"  warning  is  normal. These
# unresolved symbols are resolved when the server loads the shared
# object.  This list should be examined, however, for symbol names
# that may have been inadvertently  misspelled.  Misspelled symbol
# names will not be resolved here or at  load  time.  If a version
# 9.20 Informix Server is installed, these  symbols  are  filtered
# by the filtersym.sh script.
#
$(PROJECT_LIBS) : $(PROJECTC_OBJS) $(PROJECTX_OBJS)
	$(SHLIBLOD) $(LINKFLAGS) -o $(PROJECT_LIBS)		\
	$(PROJECTC_OBJS) $(PROJECTX_OBJS) $(LIBS)   		\
	$(DATABLADE_LIBS) 2> link.errs
	#if test -x $(INFORMIXDIR)/bin/filtersym.sh ;		\
	#then $(INFORMIXDIR)/bin/filtersym.sh link.errs ;	\
	#else cat link.errs ;                        		\
	#fi
	cat link.errs ;                        		\


server :	$(PROJECT_LIBS)


clean :
	$(RM) $(RMFLAGS) $(PROJECT_LIBS) $(PROJECTC_OBJS) $(PROJECTX_OBJS)

install :
	cp $(BINDIR)/*.bld ${INFORMIXDIR}/extend/regexp.1.0
	cp ../scripts/*sql ${INFORMIXDIR}/extend/regexp.1.0

test :
	dbaccess eric ../scripts/test.sql

$(BINDIR) :
	-mkdir $(BINDIR)


