- - - - - - - - - - - - - - - - - - - - - -
Step 1: Create the vtabdb database
- - - - - - - - - - - - - - - - - - - - - -

Database created.



Database closed.

- - - - - - - - - - - - - - - - - - - - - -
Step 2: Register the VTable bladelet
- - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - -
Step 3: Create a test table
- - - - - - - - - - - - - - - - - - - - - -

Database selected.

create table itinerary 
(
  sequence          integer,
  city              varchar(30),
  objective         lvarchar,
  primary key (sequence)
);
Table created.



insert into itinerary
(
  sequence, city, objective
)
values
(
  1, "Boston", "Meet with executive staff"
);
1 row(s) inserted.



insert into itinerary
(
  sequence, city, objective
)
values
(
  2, "New York", "Present paper to membership"
);
1 row(s) inserted.



insert into itinerary
(
  sequence, city, objective
)
values
(
  3, "Washington", "Lobby congressman"
);
1 row(s) inserted.



insert into itinerary
(
  sequence, city, objective
)
values
(
  4, "Orlando", "Consult with Mickey"
);
1 row(s) inserted.





Database closed.

- - - - - - - - - - - - - - - - - - - - - -
Step 4: Create a versioned table
- - - - - - - - - - - - - - - - - - - - - -

Database selected.

execute procedure versioned_table_create("itinerary");

(expression) 

           1

1 row(s) retrieved.





Database closed.

- - - - - - - - - - - - - - - - - - - - - -
Step 5: Run some VTable routines
- - - - - - - - - - - - - - - - - - - - - -
-- ------------------------------------------------------------
-- run.sql
--
-- Exercise the VTable routines
-- ------------------------------------------------------------

-- 1. Verify the current state and lineage. Should be "1" and
--    "0,1" respectively.
--
execute procedure current_state();

(expression) 

           1

execute procedure current_lineage();


(expression)  0,1


-- ------------------------------------------------------------
-- 2. Create two new states that are separate branches from 
--    state #1

-- verify that state 1 is open
execute procedure state_is_open(1);

(expression) 

           t


-- verify that state 1 is not closed
execute procedure state_is_closed(1);

(expression) 

           f


-- close it
execute procedure state_close(1);

-- verify the new state of state 1 (both methods)
execute procedure state_is_open(1);

(expression) 

           f

execute procedure state_is_closed(1);

(expression) 

           t


-- create two new states with state 1 as their parent
execute procedure state_create(1, "First Branch");

(expression) 

           2

execute procedure state_create(1, "Second Branch");

(expression) 

           3


-- are the new states open or closed?
execute procedure state_is_open(2);

(expression) 

           t

execute procedure state_is_closed(2);

(expression) 

           f


execute procedure state_is_open(3);

(expression) 

           t

execute procedure state_is_closed(3);

(expression) 

           f


-- what are the description fields for them?
execute procedure state_description(2);


(expression)  First Branch

execute procedure state_description(3);


(expression)  Second Branch


-- ------------------------------------------------------------
-- 3. set state to our new state #2 and make some changes

execute procedure set_state(2);
execute procedure current_state();

(expression) 

           2

execute procedure current_lineage();


(expression)  0,1,2


select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Consult with Mickey 


-- INSERT
insert into v_itinerary
(
  sequence, city, objective
)
values
(
  5, "Miami", "Spring Break!"
);

select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Consult with Mickey 

sequence   5
city       Miami
objective  Spring Break! 


-- UPDATE
update v_itinerary
set objective = "Swim with dolphins"
where sequence = 4;

select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Swim with dolphins 

sequence   5
city       Miami
objective  Spring Break! 


-- DELETE
delete from v_itinerary
where sequence = 3;

select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   4
city       Orlando
objective  Swim with dolphins 

sequence   5
city       Miami
objective  Spring Break! 


-- ------------------------------------------------------------
-- 4. set state to our new #3 and verify that state #2's 
--    changes aren't visible here.
--
execute procedure set_state(3);
execute procedure current_state();

(expression) 

           3

execute procedure current_lineage();


(expression)  0,1,3


select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Consult with Mickey 


-- ------------------------------------------------------------
-- 5. Make some changes in state #3

insert into v_itinerary
(
  sequence, city, objective
)
values
(
  6, "Key West", "Cheesburgers in paradise"
);

update v_itinerary
set objective = "Meet with Disney executives"
where city = "Orlando";

-- ------------------------------------------------------------
-- 6. Review the table contents as seen from all 3 states.

execute procedure set_state(1);
execute procedure current_state();

(expression) 

           1


select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Consult with Mickey 


execute procedure set_state(2);
execute procedure current_state();

(expression) 

           2


select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   4
city       Orlando
objective  Swim with dolphins 

sequence   5
city       Miami
objective  Spring Break! 


execute procedure set_state(3);
execute procedure current_state();

(expression) 

           3


select sequence, city, objective 
from v_itinerary
order by sequence;


sequence   1
city       Boston
objective  Meet with executive staff 

sequence   2
city       New York
objective  Present paper to membership 

sequence   3
city       Washington
objective  Lobby congressman 

sequence   4
city       Orlando
objective  Meet with Disney executives 

sequence   6
city       Key West
objective  Cheesburgers in paradise 


-- ------------------------------------------------------------
-- 7. close both of our new states. closing a state allows it
--    to be used as the parent of a new state, but it prevents
--    any more changes to be made to it. (unless, of course,
--    it's opened again!)

execute procedure state_close(2);
execute procedure state_close(3);

-- Verify that both states are now closed (and not open)
execute procedure state_is_open(2);

(expression) 

           f

execute procedure state_is_closed(2);

(expression) 

           t


execute procedure state_is_open(3);

(expression) 

           f

execute procedure state_is_closed(3);

(expression) 

           t


-- Done.

- - - 
Done. 
- - - 
