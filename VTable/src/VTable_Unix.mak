# This Makefile builds the JPGImage DataBlade on UNIX platforms.

# TARGET must be set to the location/filename
# of the platform-specific make include file.
include $(TARGET)

# This make file assumes a directory structure  that is  similar to
# the directory structure in which the source files were originally
# generated by BladeSmith.  This is:
#
#                              src  <- the makefile goes here
#                               |
#                               c 
#
# Because the directory structure is the same,  files can be copied
# from NT to UNIX (and back) by first NFS  mounting  your UNIX file
# system and then using Windows NT Explorer to copy the files.

# =================================================================


# This is the project title.
PROJECT_TITLE = VTable

# The linked DataBlade module is placed here.
BINDIR = $(OS_NAME)-$(PLATFORM)

# Additional libraries that need to be included
DATABLADE_LIBS = 

# Platform independent code goes here.
# The following code was generated by BladeSmith.

MI_INCL   = $(INFORMIXDIR)/incl
CFLAGS    = -DMI_SERVBUILD $(CC_PIC) -I$(MI_INCL)/public -I$(MI_INCL)/esql -I$(MI_INCL) -I./c $(COPTS)
LINKFLAGS = $(SHLIBLFLAG) $(SYMFLAG)
LIBS      =

# This is a list of the C object files.
PROJECTC_OBJS = \
	$(BINDIR)/ddl_exec.$(OBJSUFF) \
	$(BINDIR)/vt_beginscan.$(OBJSUFF) \
	$(BINDIR)/vt_endscan.$(OBJSUFF) \
	$(BINDIR)/vt_getnext.$(OBJSUFF) \
	$(BINDIR)/vt_rescan.$(OBJSUFF) \
	$(BINDIR)/vt_scancost.$(OBJSUFF) \
	$(BINDIR)/vtable.$(OBJSUFF)

PROJECT_LIBS = $(BINDIR)/$(PROJECT_TITLE).$(BLDLIB_SUFF)

all : $(BINDIR)
	$(MAKE) $(MAKEFLAGS) -f $(PROJECT_TITLE)_Unix.mak server $(BUILD_TARGET)

# Construct each object file.

$(BINDIR)/ddl_exec.$(OBJSUFF) : c/ddl_exec.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_beginscan.$(OBJSUFF) : c/vt_beginscan.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_endscan.$(OBJSUFF) : c/vt_endscan.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_getnext.$(OBJSUFF) : c/vt_getnext.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_rescan.$(OBJSUFF) : c/vt_rescan.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_getnext.$(OBJSUFF) : c/vt_getnext.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vt_scancost.$(OBJSUFF) : c/vt_scancost.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/vtable.$(OBJSUFF) : c/vtable.c
	$(CC) $(CFLAGS) -o $@ -c $?

c/vtable.c :  c/vtable.h


# Construct the shared library.
# Do *NOT* link with client side  libraries.  You  will  see  many
# undefined symbols during linking.  This  is  normal  since those
# symbols are resolved when the server loads  your  shared object.
#
# ATTENTION:
# The  ld  "Symbol referencing errors"  warning  is  normal. These
# unresolved symbols are resolved when the server loads the shared
# object.  This list should be examined, however, for symbol names
# that may have been inadvertently  misspelled.  Misspelled symbol
# names will not be resolved here or at  load  time.  If a version
# 9.20 Informix Server is installed, these  symbols  are  filtered
# by the filtersym.sh script.
#
$(PROJECT_LIBS) : $(PROJECTC_OBJS) 
	$(SHLIBLOD) $(LINKFLAGS) -o $(PROJECT_LIBS)		\
	$(PROJECTC_OBJS) $(LIBS)   		\
	$(DATABLADE_LIBS) 2> link.errs
	if test -x $(INFORMIXDIR)/bin/filtersym.sh ;		\
	then $(INFORMIXDIR)/bin/filtersym.sh link.errs ;	\
	else cat link.errs ;                        		\
	fi


server :	$(PROJECT_LIBS)


clean :
	$(RM) $(RMFLAGS) $(PROJECT_LIBS) $(PROJECTC_OBJS) 


$(BINDIR) :
	-mkdir $(BINDIR)
