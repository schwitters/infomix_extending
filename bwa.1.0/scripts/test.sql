-- Generated by BladeSmith 3.70.TC1  DO NOT MODIFY. --

execute procedure ifx_allow_newline('t');

begin work;

create opaque type BWA(
	internallength = 136,
	alignment = 1
);

grant usage on type BWA to public;

create function BWAIn (lvarchar)
returns BWA
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAInput)" language c;

alter function BWAIn (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAInput)");

alter function BWAIn (lvarchar)
	with (add parallelizable);

alter function BWAIn (lvarchar)
	with (add not variant);

grant execute on function BWAIn (lvarchar) to public;

create implicit cast 
(
	lvarchar as BWA
	with  BWAIn
);

create function BWAOut (BWA)
returns lvarchar
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAOutput)" language c;

alter function BWAOut (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAOutput)");

grant execute on function BWAOut (BWA) to public;

create cast 
(
	BWA as lvarchar
	with  BWAOut
);

create function BWASend (BWA)
returns sendrecv
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWASend)" language c;

alter function BWASend (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWASend)");

grant execute on function BWASend (BWA) to public;

create cast 
(
	BWA as sendrecv
	with  BWASend
);

create function BWARecv (sendrecv)
returns BWA
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAReceive)" language c;

alter function BWARecv (sendrecv)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAReceive)");

grant execute on function BWARecv (sendrecv) to public;

create implicit cast 
(
	sendrecv as BWA
	with  BWARecv
);

create function BWAImpT (impexp)
returns BWA
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAImportText)" language c;

alter function BWAImpT (impexp)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAImportText)");

grant execute on function BWAImpT (impexp) to public;

create implicit cast 
(
	impexp as BWA
	with  BWAImpT
);

create function BWAExpT (BWA)
returns impexp
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAExportText)" language c;

alter function BWAExpT (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAExportText)");

grant execute on function BWAExpT (BWA) to public;

create cast 
(
	BWA as impexp
	with  BWAExpT
);

create function BWAImpB (impexpbin)
returns BWA
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAImportBinary)" language c;

alter function BWAImpB (impexpbin)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAImportBinary)");

grant execute on function BWAImpB (impexpbin) to public;

create implicit cast 
(
	impexpbin as BWA
	with  BWAImpB
);

create function BWAExpB (BWA)
returns impexpbin
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAExportBinary)" language c;

alter function BWAExpB (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAExportBinary)");

grant execute on function BWAExpB (BWA) to public;

create cast 
(
	BWA as impexpbin
	with  BWAExpB
);

create function Compare (BWA,BWA)
returns integer
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWACompare)" language c;

alter function Compare (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWACompare)");

alter function Compare (BWA,BWA)
	with (add parallelizable);

alter function Compare (BWA,BWA)
	with (add not variant);

grant execute on function Compare (BWA,BWA) to public;

create function Equal (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEqual)" language c;

alter function Equal (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEqual)");

alter function Equal (BWA,BWA)
	with (add parallelizable);

alter function Equal (BWA,BWA)
	with (add not variant);

grant execute on function Equal (BWA,BWA) to public;

create function NotEqual (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEqual)" language c;

alter function NotEqual (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEqual)");

alter function NotEqual (BWA,BWA)
	with (add parallelizable);

alter function NotEqual (BWA,BWA)
	with (add not variant);

grant execute on function NotEqual (BWA,BWA) to public;

create function LessThan (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWALessThan)" language c;

alter function LessThan (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWALessThan)");

alter function LessThan (BWA,BWA)
	with (add parallelizable);

alter function LessThan (BWA,BWA)
	with (add not variant);

grant execute on function LessThan (BWA,BWA) to public;

create function GreaterThan (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGreaterThan)" language c;

alter function GreaterThan (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGreaterThan)");

alter function GreaterThan (BWA,BWA)
	with (add parallelizable);

alter function GreaterThan (BWA,BWA)
	with (add not variant);

grant execute on function GreaterThan (BWA,BWA) to public;

create function LessThanOrEqual (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWALessThanOrEqual)" language c;

alter function LessThanOrEqual (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWALessThanOrEqual)");

alter function LessThanOrEqual (BWA,BWA)
	with (add parallelizable);

alter function LessThanOrEqual (BWA,BWA)
	with (add not variant);

grant execute on function LessThanOrEqual (BWA,BWA) to public;

create function GreaterThanOrEqual (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGreaterThanOrEqual)" language c;

alter function GreaterThanOrEqual (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGreaterThanOrEqual)");

alter function GreaterThanOrEqual (BWA,BWA)
	with (add parallelizable);

alter function GreaterThanOrEqual (BWA,BWA)
	with (add not variant);

grant execute on function GreaterThanOrEqual (BWA,BWA) to public;

create function Contains (BWA,BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAContains)" language c;

alter function Contains (BWA,BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAContains)");

alter function Contains (BWA,BWA)
	with (add parallelizable);

alter function Contains (BWA,BWA)
	with (add not variant);

grant execute on function Contains (BWA,BWA) to public;

create function GetCategory (BWA)
returns varchar (32)
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWACategory)" language c;

alter function GetCategory (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWACategory)");

alter function GetCategory (BWA)
	with (add parallelizable);

alter function GetCategory (BWA)
	with (add not variant);

grant execute on function GetCategory (BWA) to public;

create function GetFamily (BWA)
returns varchar (32)
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAFamily)" language c;

alter function GetFamily (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAFamily)");

alter function GetFamily (BWA)
	with (add parallelizable);

alter function GetFamily (BWA)
	with (add not variant);

grant execute on function GetFamily (BWA) to public;

create function GetGroup (BWA)
returns varchar (32)
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGroup)" language c;

alter function GetGroup (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAGroup)");

alter function GetGroup (BWA)
	with (add parallelizable);

alter function GetGroup (BWA)
	with (add not variant);

grant execute on function GetGroup (BWA) to public;

create function GetIdentity (BWA)
returns varchar (32)
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAIdentity)" language c;

alter function GetIdentity (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAIdentity)");

alter function GetIdentity (BWA)
	with (add parallelizable);

alter function GetIdentity (BWA)
	with (add not variant);

grant execute on function GetIdentity (BWA) to public;

create function Empty (BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEmpty)" language c;

alter function Empty (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEmpty)");

alter function Empty (BWA)
	with (add parallelizable);

alter function Empty (BWA)
	with (add not variant);

alter function Empty (BWA)
	with (add negator=NotEmpty);

grant execute on function Empty (BWA) to public;

create function Empty (BWA,int)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEmptyPart)" language c;

alter function Empty (BWA,int)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAEmptyPart)");

alter function Empty (BWA,int)
	with (add parallelizable);

alter function Empty (BWA,int)
	with (add not variant);

alter function Empty (BWA,int)
	with (add negator=NotEmpty);

grant execute on function Empty (BWA,int) to public;

create function NotEmpty (BWA)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEmpty)" language c;

alter function NotEmpty (BWA)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEmpty)");

alter function NotEmpty (BWA)
	with (add parallelizable);

alter function NotEmpty (BWA)
	with (add not variant);

alter function NotEmpty (BWA)
	with (add negator=Empty);

grant execute on function NotEmpty (BWA) to public;

create function NotEmpty (BWA,int)
returns boolean
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEmptyPart)" language c;

alter function NotEmpty (BWA,int)
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWANotEmptyPart)");

alter function NotEmpty (BWA,int)
	with (add parallelizable);

alter function NotEmpty (BWA,int)
	with (add not variant);

alter function NotEmpty (BWA,int)
	with (add negator=Empty);

grant execute on function NotEmpty (BWA,int) to public;

create procedure BWAInitStats ()
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAInitStats)" language c;

alter procedure BWAInitStats ()
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAInitStats)");

alter procedure BWAInitStats ()
	with (add not variant);

grant execute on procedure BWAInitStats () to public;

create function BWAPrintStats ()
returns lvarchar
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAPrintStats)" language c;

alter function BWAPrintStats ()
	with (Modify External Name = "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(BWAPrintStats)");

alter function BWAPrintStats ()
	with (add iterator);

grant execute on function BWAPrintStats () to public;

insert into systraceclasses(name) values ('BWA');
create procedure TraceSet_BWA (lvarchar, int)
with (variant)
external name "$INFORMIXDIR/extend/BWA.1.0/BWA.bld(TraceSet_BWA)"
language c;

insert into systraceclasses(name) values ('BWAstats');
insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA0", "en_us.1252", "%UDR_NAME%: The %PART_NAME% part (%LENGTH%) exceeds the %MAX_LENGTH% character limit."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA0", "en_us.8859-1", "%UDR_NAME%: The %PART_NAME% part (%LENGTH%) exceeds the %MAX_LENGTH% character limit."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA1", "en_us.1252", "%UDR_NAME%: a BWA has 4 parts, but this specifies %NUM_PARTS%. "
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA1", "en_us.8859-1", "%UDR_NAME%: a BWA has 4 parts, but this specifies %NUM_PARTS%. "
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA2", "en_us.1252", "%UDR_NAME%: at least one part must contain a search value."
);

insert into informix.syserrors
	(level, seqno, sqlstate, locale, message)
values
(
	0, 1, "UBWA2", "en_us.8859-1", "%UDR_NAME%: at least one part must contain a search value."
);

commit work;

