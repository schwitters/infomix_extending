# This Makefile builds the BWA DataBlade.

# TARGET must be set to the location/filename
# of the platform-specific make include file.
include $(TARGET)

# ===============================================================

# This is the project title.
PROJECT_TITLE = BWA

BINDIR = $(OS_NAME)-$(PLATFORM)

# Platform independent code goes here.
# The following code was generated by BladeSmith.

MI_INCL = $(INFORMIXDIR)/incl
CFLAGS = -DMI_SERVBUILD $(CC_PIC) -I$(MI_INCL)/public -I$(MI_INCL)/esql -I$(MI_INCL) $(COPTS) -Xa
LINKFLAGS = $(SHLIBLFLAG) $(SYMFLAG)
LIBS =

PROJECT_OBJS= \
	$(BINDIR)/support.$(OBJSUFF) \
	$(BINDIR)/udr.$(OBJSUFF) \
	$(BINDIR)/BWA.$(OBJSUFF)
PROJECT_LIBS=$(BINDIR)/$(PROJECT_TITLE).$(BLDLIB_SUFF)


all: $(BINDIR)
	$(MAKE) $(MAKEFLAGS) -f UNIX.mak server

# Construct the object file.

$(BINDIR)/support.$(OBJSUFF) : support.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/udr.$(OBJSUFF) : udr.c
	$(CC) $(CFLAGS) -o $@ -c $?

$(BINDIR)/BWA.$(OBJSUFF) : BWA.c
	$(CC) $(CFLAGS) -o $@ -c $?



udr.c :  $(PROJECT_TITLE).h

BWA.c :  $(PROJECT_TITLE).h


# Construct the shared library.
# Do *NOT* link with client side libraries.
# You will see many undefined symbols during linking.  This is
# normal since those symbols are resolved when the server loads
# your shared object.
#
# ATTENTION: 
# The ld "Symbol referencing errors" warning is normal.  
# These unresolved symbols are resolved when the server
# loads the shared object.  This list should be examined, however,
# for symbol names that may have been inadvertently misspelled.
# Misspelled symbol names will not be resolved here or at load time.
#
$(PROJECT_LIBS) : $(PROJECT_OBJS)
	$(SHLIBLOD) $(LINKFLAGS) -o $(PROJECT_LIBS) \
	$(PROJECT_OBJS) $(LIBS) $(DATABLADE_LIBS) 2> link.errs
	if test -x $(INFORMIXDIR)/bin/filtersym.sh ;\
	then filtersym.sh link.errs ;\
	else cat link.errs ;\
	fi


server:	$(PROJECT_LIBS)


clean:
	$(RM) $(RMFLAGS) $(PROJECT_LIBS) $(PROJECT_OBJS)


$(BINDIR):
	-mkdir $(BINDIR)
